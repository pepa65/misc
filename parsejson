#!/usr/bin/env bash
set +vx
# parsejson - Parse JSON in bash
# Usage:  parsejson [ -h|--help | <string> | <filename> ]
#   When no argument is given, input is read on stdin

Err(){ # 1:message
	echo "Error: $1" >&2
	exit 1
}

Parse_array(){ # I:length,i,preserve_current_char
	local current_path=${1:+$1.}$2 current_scope=root current_index=0 c
	while ((i<length))
	do
		((!preserve_current_char && i+=1)) && read -rsn 1 c
		preserve_current_char=0 c=${c:-' '}
		case "$current_scope" in
		root) # Waiting for new object or value
			case "$c" in
			'{')
				Parse_object "$current_path" "$current_index"
				current_scope=entry_separator ;;
			']') return ;;
			[\"tfTF\-0-9])
				preserve_current_char=1 # Parse_value decides the kind of value
				Parse_value "$current_path" "$current_index"
				preserve_current_char=1 # Parse_value terminated with a separator or array end: handle in the next iteration
				current_scope=entry_separator ;;
			*) Err "invalid character $i: $c"
			esac ;;
		entry_separator)
			[[ $c = ',' ]] && ((current_index+=1)) && current_scope=root
			[[ $c = ']' ]] && return ;;
		*) Err "current scope '$current_scope' is neither 'root' nor 'entry_separator'"
		esac
	done
}

Parse_value(){ # I:length,i,preserve_current_char
	local current_path=${1:+$1.}$2 current_scope=root c
	while ((i<length))
	do
		((!preserve_current_char)) && ((i+=1)) && read -rsn 1 c
		preserve_current_char=0 c=${c:-' '}
		case "$current_scope" in
		root) # Waiting for new string, number or boolean
			case "$c" in
			'"') # String begin
				current_scope=string current_varvalue= ;;
			[\-0-9]) # Number begin
				current_scope=number current_varvalue=$c ;;
			[tfTF]) # True or false begin
				current_scope=boolean current_varvalue=$c ;;
			'[') # Array begin
				Parse_array '' "$current_path"
				return ;;
			'{') # Object begin
				Parse_object '' "$current_path"
				return ;;
			# Ignore everything else
			esac ;;
		string) # Waiting for string end
			case "$c" in
			'"') # String end if not in escape mode, normal character otherwise
				((!current_escaping)) && echo "$current_path=$current_varvalue" && return
				((current_escaping)) && current_varvalue=$current_varvalue$c current_escaping=0 ;;
			'\') # Escape character, entering or leaving escape mode
				((current_escaping==1)) && current_varvalue=$current_varvalue$c
				((current_escaping=!current_escaping)) ;;
			*) # Any other string character
				current_escaping=0 current_varvalue=$current_varvalue$c
			esac ;;
		number) # Waiting for number end
			case "$c" in
			[,\]}]) # Separator or array end or object end
				echo "$current_path=$current_varvalue"
				preserve_current_char=1 # Handle in caller
				return ;;
			[\-0-9.]) # Number: only digits, dots and a negative sign
				current_varvalue=$current_varvalue$c ;;
			# Ignore everything else
			esac ;;
		boolean) # Waiting for boolean to end
			case "$c" in
			[,\]}]) # Separator or array end or object end
				echo "$current_path=$current_varvalue"
				preserve_current_char=1 # Handle in caller
				return ;;
			[a-zA-Z]) # No data validation, so no strict checking
				current_varvalue=$current_varvalue$c ;;
			# Ignore everything else
			esac ;;
		*) Err "current scope '$current_scope' is neither 'root' nor 'string' nor 'boolean'"
		esac
	done
}

Parse_object(){ # I:length,i,preserve_current_char
	local current_path=${1:+$1.}$2 current_scope=root c
	while ((i<length))
	do
		((!preserve_current_char)) && ((i+=1)) && read -rsn 1 c
		preserve_current_char=0 c=${c:-' '}
		case "$current_scope" in
		root) # Waiting for new field or object end
			[[ $c = '}' ]]  && return
			[[ $c = '"' ]] && current_scope=varname current_varname='' current_escaping=0 ;;
		varname) # Reading the field name
			case "$c" in
			'"') # String end if not in escape mode, normal character otherwise
				((!current_escaping)) && current_scope=key_value_separator
				((current_escaping==1)) && current_varname=$current_varname$c current_escaping=0 ;;
			'\') # Escape character, entering or leaving escape mode
				((current_escaping=1-current_escaping))
				current_varname=$current_varname$c ;;
			*) # Any other string character
				current_escaping=0 current_varname=$current_varname$c
			esac ;;
		key_value_separator) # Waiting for the key value separator (:)
			[[ $c == ':' ]] && Parse_value "$current_path" "$current_varname" && current_scope=field_separator ;;
		field_separator) # Waiting for the field separator (,)
			[[ $c = ',' ]] && current_scope=root
			[[ $c = '}' ]] && return ;;
		*) Err "current scope '$current_scope' is neither 'root' nor 'varname' nor 'key_value_separator' nor 'field_separator'"
		esac
	done
}

Parse(){ # I:length
	local i=0 preserve_current_char=0 c
	while ((i<length))
	do
		read -rsn 1 c
		c=${c:-' '}
		((i+=1))

		# A valid JSON string consists of exactly one object
		[[ $c = '{' ]] && Parse_object && return
		# ... or one array
		[[ $c = '[' ]] && Parse_array && return
		Err "invalid character $i: $c"
	done
}

# Parse input: string, piped-in, or file
[[ "$@" ]] && input=$* || input=$(cat -)
if [[ $1 = -- ]]
then shift; input=$*
else [[ $1 = -h || $1 = --help ]] &&
	echo "Usage:  $0 [ -h|--help | <string> | <filename> ]"
	echo "  When no argument is given, input is read on stdin"
	exit
fi

[[ -f $input ]] && input=$(<"$input")
length=${#input}
Parse <<<"$input"
