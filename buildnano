#!/bin/bash

# buildnano - Build nano from source (release or git repo) on Ubuntu or Debian
# Required: coreutils(mkdir cd mktemp rm)
#   git+autoconf+autopoint+automake/wget[git/release]
#   pkg-config gettext libncursesw5-dev groff[optional html-help]
#   texinfo make gcc libmagic-dev[optional filetype detection]
# Usage: buildnano [version|-g|--git]
#   -g/--git: build from current git HEAD (not stable release version)

# Configuration options to (un)comment-out
conf=(
	#disable-browser
	#disable-color
	disable-comment
	disable-extra
	disable-help
	#disable-histories
	disable-justify
	#disable-libmagic
	#disable-linenumbers
	disable-mouse
	#disable-multibuffer
	#disable-nanorc
	disable-operatingdir
	disable-speller
	#disable-tabcomp
	#disable-wordcomp
	disable-wrapping
	#enable-tiny
	#disable-wrapping-as-root
	#disable-nls
)

# Location of git repos, can be passed in environment variable GITDIR
gitdir=${GITDIR:=~/git}
# URL of nano git repo
nanogit="http://git.savannah.gnu.org/git/nano.git"

# URL of latest release
nanosrcdir="https://nano-editor.org/dist/latest"

# Required packages
req="pkg-config libncursesw5-dev libmagic-dev texinfo gettext groff"


Abort(){ # $1:message
	echo "ABORT: $1"
	exit 1
}

Sudo(){ # $@:command+arguments
	echo "Elevated privileges required"
	sudo "$@"
}

[[ $- = *i* ]] && echo "Don't source, but run like: bash $BASH_SOURCE" &&
	return 2

sudo=
if ((EUID))
then
	sudo=$(type -p sudo) ||
		Abort "package sudo required to elevate privilege for installing"
fi

git=0
if [[ $1 ]]
then
	if [[ $1 = -g || $1 = --git ]]
	then git=1 req+=" git autoconf autopoint"
	else
		[[ $1 =~ ^[45]\.[0-9]$ ]] &&
			ver=$1 ||
			Abort "argument can only be -g/--git or version; bad version: $1"
	fi
else
	req+=" wget"
fi

# Install missing packages

pkgs=$(dpkg -l) inst=
for p in $req
do grep -q "^ii  $p[ :]" <<<$pkgs || inst+=" $p"; done
[[ $inst ]] && echo "Need to install $inst" &&
	! Sudo apt-get install $inst && Abort "could not install packages:$inst"

if ((git))
then
	# Prepare git repo clone
	[[ ${gitdir:0:1} = / ]] || Abort "GITDIR not an absolute path: $gitdir"
	mkdir -p "$gitdir" || Abort "$gitdir not a directory"
	cd "$gitdir" || Abort "could not enter git directory $gitdir"

	# Pull when repo present already
	if [[ -d nano ]]
	then
		cd nano || Abort "could not enter directory $gitdir/nano"
		# Delete on unsuccessful pull
		! git pull && cd .. && rm -rf -- nano
	fi
	cd "$gitdir"
	[[ ! -d nano ]] && ! git clone $nanogit &&
		Abort "could not download the nano git repo"
	cd nano
else
	# Build in temporary directory in PWD
	tmpdir=$(mktemp -d "./nano.XXXXXX")
	tmpdir=$(readlink -e "$tmpdir") here=$PWD
	trap "cd '$here'; rm -rf -- '$tmpdir'" QUIT EXIT
	cd "$tmpdir" || Abort "could not enter directory $tmpdir"
	wget -q "$nanosrcdir/ChangeLog" ||
		Abort "could not download nano changelog"
	[[ $ver ]] || ver=$(head -1 ChangeLog) ver=${ver##* v} ver=${ver%:}
	wget -q "$nanosrcdir/nano-$ver.tar.xz" ||
		Abort "could not download nano source archive version $ver"
	file="nano-$ver.tar.xz"
	tar xf "$file" || Abort "could not unpack $file"
	dir="nano-$ver"
	cd "$dir" || Abort "could not enter directory $tmpdir/$dir"
fi

# Needs autoconf autopoint
if ((git))
then ./autogen.sh || Abort "error in Autogen"
fi

# Needs gcc pkg-config libncursesw5-dev gettext (groff)
./configure ${conf[@]/#/--} || Abort "error in Configure"

# Needs make texinfo
make || Abort "error in Make"

# Needs make sudo
Sudo make install-strip || Abort "error in Install"
hash nano
echo "Installed $(nano -V)"

exit 0
