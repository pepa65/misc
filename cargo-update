#!/usr/bin/env bash
set +vx -e  # Stop on any error
# cargo-update - Update dependencies of Rust project(s)
#  Searching $git for all git repos that are pushing to "$user" on "$host",
#  with "$author" matching the 'authors' field in `Cargo.toml`.
# Required: find grep sed git cargo coreutils(cd head ls)
# Usage:  cargo-update [-h|--help] | [-n|--norun] [-i|--ignoreupdates] -a|--all | <pkg>...

git=$HOME/git/ host=github.com user=pepa65 author=pepa65 toml=Cargo.toml readme=README.md

# Check flags
help=0 all=0 ignoreupdates=0 norun=0 args=
(($#==0)) &&
	help=1
for a in $@
do
	case $a in
	-h|--help) help=1 ;;
	-a|--all) all=1 ;;
	-i|--ignoreupdates) ignoreupdates=1 ;;
	-n|--norun) norun=1 ;;
	*) args+="$a "
	esac
done

[[ -z $args && $norun = 1 ]] &&
	all=1

# Show suitable Rust projects
declare -A pkgs
for t in $(find "$git" |grep "/$toml$" |grep -v /target/package/)
do
	repo=$(cd ${t%$toml}; [[ -d .git ]] &&
			git remote -v |grep '^origin' |grep ' (push)$' |grep "${host//./\\.}[:/]$user/" |head -1) &&
		grep '^authors' "$t" |grep -q "$author" &&
		v=$(grep '^version = ' "$t") &&
		v=${v##* } v=${v//\"} p=${t#$git} p=${p%/$toml} &&
		pkgs[$p]=$v
done
((${#pkgs[@]}==0)) &&
  echo "### No suitable packages found" &&
  exit 1

packages=$(grep -o '[^ ]*' <<<${!pkgs[@]} |sort |tr $'\n' ' ')
packages=${packages%?}
echo -e "--- Suitable packages:\n    $packages"
((help)) &&
	echo "--- Usage:  ${0##*/} [-h|--help] | [-n|--norun] [-a|--all | <pkg>...]" &&
	exit

echo
((all)) &&
	set -- $packages ||
	set -- $args

updates= success=
declare -A failed
for pkg in $@
do
  [[ ! ,${packages// /,}, = *,$pkg,* ]] &&
    echo -e "### Given package not suitable: $pkg\n" &&
    continue

	if ((!ignoreupdates))
	then
		# Check updates
		cd "$git$pkg"
		echo "--- Start checking package: $pkg"
		update=$(cargo update --verbose -n 2>&1)
		locking=$(grep -o 'Locking .*' <<<"$update")
		[[ ${locking:8:1} = 0 ]] &&
			echo -e "=== No updates in dependencies: $pkg\n" &&
			continue

		updates+="$pkg " failed[$pkg]=1
		echo -e "$(grep 'v[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' <<<"$update")\n=== Updates found: $pkg"
		((norun)) &&
			echo &&
			continue
	fi

	# Check git status
	status=$(git status)
	grep -q 'Untracked files:' <<<"$status" &&
		echo -e "--- Warning: Ucommitted files, will be ignored:\n$(grep -P '^\t' <<<"$status")"

	grep -q 'use "git push"' <<<"$status" &&
		echo -e "### Skip: Unpushed commits:\n$(grep ' commits\.$' <<<"$status") in: $pkg\n" &&
		continue

	! update=$(cargo update 2>&1) &&
		echo -e "$update\n### Skip: Cargo update failed: $pkg\n" &&
		continue

	# Patch
	((ignoreupdates)) ||
		echo "--- Cargo update done"
	curr=${pkgs[$pkg]} patch=${curr##*.} pp1=$((patch+1)) new=${curr%.*}.$pp1
	! sed -i "s/^version = \"$curr\"$/version = \"$new\"/" $toml &&
		echo "### Skip: version update in $toml unsuccesful: $pkg\n" &&
		continue

	echo "--- $toml version increased: $new"
	! sed -i "s/$curr/$new/" $readme &&
		echo -e "### Skip: version update in $readme unsuccesful: $pkg\n" &&
		continue

	lines=$(grep $new $readme) &&
		echo -e "--- Versions in $readme increased:\n$(sed 's/^/    /' <<<"$lines")\n" ||
		echo -e "--- Old version $curr not found in $readme\n"
	! build=$(cargo rel 2>&1) &&
		echo -e "$build\n### Skip: Cargo release build failed: $pkg\n" &&
		continue

	# Compress the binaries
	binaries=
	## Fails if targets of symlinks have space(s)!
	for f in $(command ls -l |grep ^l |sed 's/.* -> //')
	do
		grep -q " ELF " <<<$(file "$f") ||
			continue
		b=$HOME/bin/${f##*/}
		cp "$f" "$b"
		upx --best --lzma "$b"
		binaries+="$b "
	done
	[[ -z $f ]] &&
		echo -e "--- Warning: No binaries symlinked: $pkg\n"

	# Commit, tag and push to Github
	git commit -a -m 'Update deps'
	echo "--- Changes committed"
	git tag $new -m $new
	echo "--- New tag $new created locally"
	git push origin --all
	echo "--- Changes pushed to Github"

	# Make release
	#repo=${repo% (push)} repo=${repo:7}  # Strip 'origin '
	gh repo set-default "$host/$user/$pkg"
	gh release create $new $binaries -t 'Update deps' --verify-tag -n ''
	echo "--- Release $new created"

	# Publish on crates.io
	cargo pub --allow-dirty || continue  # Continue on failed crates.io upload
	rm -rf "$git$pkg/target" &&
		echo "--- Target cache $git/$pkg/target deleted!"
	echo -e "=== Release published to crates.io: $pkg\n"
	success+="$pkg "
	unset failed[$pkg]
done

[[ $updates ]] &&
	echo "=== Updates found: $updates" ||
	echo "=== No updates found at all"
if ((!norun))
then
	[[ $success ]] &&
		echo "=== Updated okay:  $success"
	[[ $failed ]] &&
		echo "### Update failed: ${!failed[@]}"
fi
