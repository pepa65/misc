#!/bin/bash
set +vx
# buildgocryptfs - Build gocryptfs
# Usage: buildgocryptfs [-n|--new-go]
#   -n/--new-go:  force the installation of go even if one is present
#
# Required: go coreutils(ls) pkg-config libssl-dev
#   Or (to install go): wget sudo tar coreutils(mktemp mv rm)
# Environment variables:
#   If GO_OS is not set to the OS, 'linux' will be used.
#   If GO_ARCH (architecture) is not set, 'amd64' or 'armv6l' will be used.
#   If GO_VERSION is not set to a specific go version, the latest is used.
#   When TMPDIR is set, it is used for the temporary directory

goloc=/usr/local  # Install location for the go tree
bin=/usr/local/bin  # Install location for gocryptfs binary
git=github.com/rfjakob/gocryptfs

Abort(){ # $1:message
	echo "ABORT: $1"
	exit 1
}

Sudo(){ # $1:prompt $2-$:command
	local prompt="Privileges required"
	[[ $1 ]] && prompt+=" $1:" || prompt+=':'
	shift
	((EUID)) && ! sudo=$(type -p sudo) &&
		Abort "privileges required but 'sudo' not available"
	$sudo -nv &>/dev/null || echo "$prompt"
	$sudo $@
}

newgo=0 sudo=
[[ $1 = -n || $1 = --new-go ]] && newgo=1

# Try to install go if not found in PATH
if ((newgo)) || ! go=$(type -p go)
then
	os=${GO_OS:-linux}
	[[ $(uname -m) = armv7l ]] && arch=armv6l || arch=amd64
	: ${arch:=$GO_ARCH}
	ver=$GO_VERSION
	[[ -z $ver ]] &&
		url=$(wget -qO- "https://golang.org/dl" |grep -o \
			"https://dl\.google\.com/go/go[^>]*\.$os-$arch\.tar\.gz" |head -1) \
		ver=${url%.$os-$arch.tar.gz} ver=${ver#https://dl.google.com/go/go}
	gover="go$ver.$os-$arch.tar.gz"
	url="https://dl.google.com/go/$gover"
	echo "Installing go $ver on $arch $os"
	tmp=$(mktemp -d --tmpdir=$TMPDIR)
	trap "rm -rf -- '$tmp'" QUIT EXIT
	wget -qO "$tmp/$gover" "$url" ||
		Abort "go not in PATH and could not download it"
	tar xf "$tmp/$gover" -C "$tmp" || Abort "error unpacking $gover to $tmp"
	# Move install directory if it exists already
	if [[ -d $goloc/go ]]
	then
		! Sudo "to move old go directory" mv "$goloc/go" "$goloc/$go_old$RANDOM" &&
			Abort "could not move $goloc/go out of the way"
	fi
	Sudo "to install go directory" mv "$tmp/go" "$goloc" ||
		Abort "could not move $tmp/go to $goloc"
	grep -q ":$goloc/go/bin:" <<<":$PATH:" || echo "Add to PATH: $goloc/go/bin"
	export PATH="$goloc/go/bin:$PATH"
	[[ $GOROOT ]] || echo "Set in .bashrc: export GOROOT='$goloc/go'"
	[[ $GOPATH ]] || echo "Set in .bashrc: export GOPATH='~/go'"
	export GOROOT="$goloc/go" GOPATH=~/go
	go="$goloc/go/bin/go"
fi

# Install gocryptfs
repo=$("$go" env GOPATH)/src/$git
"$go" get -d -u $git
"$repo/build.bash"
# "$repo/test.bash"
Sudo "to install gocryptfs" cp "$repo/gocryptfs" "$bin" && echo "gocryptfs installed in $bin"

exit 0
