#!/bin/bash

# buildgocryptfs - Build gocryptfs
# Required: go coreutils(cd ls) pkg-config
#   Or (to install go): wget sudo tar coreutils(mktemp cd mv rm rmdir)
# GOZ can be set to a different go-relase-archive
# When TMPDIR is set, it is used for the temporary directory

goloc=/usr/local # Install location for the go tree
bin=/usr/local/bin # Install location for gocryptfs binary

if ! go=$(type -p go)
then # Check for latest version: https://golang.org/dl/
  arch=$(uname -m)
  [[ $GOZ ]] && goz=$GOZ ||
    case $arch in
      armv7l) goz=go1.11.2.linux-armv6l.tar.gz ;;
      x86_64) goz=go1.11.2.linux-amd64.tar.gz ;;
      *) echo "Manually select the right go release for $arch" && exit 1
    esac
  dir=$(mktemp -d --tmpdir=$TMPDIR)
  cd "$dir"
  wget -q "https://dl.google.com/go/$goz"
  tar xf "$goz"
  echo "Set in .bashrc: export GOROOT='$goloc/go' GOPATH='~/go'"
  export GOROOT="$goloc/go" GOPATH=~/go
  [[ -d $goloc/go ]] &&
    sudo rm -rf "$goloc/go-old" && sudo mv "$goloc/go" "$goloc/go-old"
  sudo mv go "$goloc"
  go="$goloc/go/bin/go"
  export PATH="$goloc/go/bin:$PATH"
  cd -
  rm "$dir/$goz"
  rmdir "$dir"
fi
"$go" get -d github.com/rfjakob/gocryptfs
cd $("$go" env GOPATH)/src/github.com/rfjakob/gocryptfs
./build.bash
#./test.bash
sudo cp gocryptfs "$bin" && echo "gocryptfs installed in $bin"
cd -

exit 0
