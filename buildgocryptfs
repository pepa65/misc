#!/usr/bin/env bash
set +vx
# buildgocryptfs - Build gocryptfs and install go if necessary
# Usage: buildgocryptfs [-g|--get-go [<ver>]] [-n|--no-cryptfs] [-h|--help]
#   -g/--get-go [<ver>]:  Install go(lang) [version] even if already present
#   -n/--no-gocryptfs:    No gocryptfs install
#   -h/--help:            Display this help text
#
# Required: go coreutils(ls) pkg-config libssl-dev
#   Or (to install go): wget sudo tar coreutils(mktemp mv rm tail)
# Environment variables:
#   If GO_OS is not set to the OS, 'linux' will be used.
#   If GO_ARCH (architecture) is not set, 'amd64' or 'armv6l' will be used.
#   If GO_VERSION is not set to a specific go version, the latest is used.
#   When TMPDIR is set, it is used for the temporary directory

goloc=/usr/local  # Install location for the go tree
bin=/usr/local/bin  # Install location for gocryptfs binary
git=github.com/rfjakob/gocryptfs

Help(){
	cat <<-EOH
		buildgocryptfs - Build gocryptfs and install go if necessary
		Usage: buildgocryptfs [-g|--get-go [<ver>]] [-n|--no-cryptfs] [-h|--help]
		  -g/--get-go [<ver>]:  Install go(lang) [version] even if already present
		  -n/--no-gocryptfs:    No gocryptfs install
		  -h/--help:            Display this help text
	EOH
	exit 0
}

Abort(){ # $1:message
	echo "ABORT: $1"
	exit 1
}

Sudo(){ # $1:prompt $2-$:command
	local prompt="Privileges required"
	[[ $1 ]] && prompt+=" $1:" || prompt+=':'
	shift
	((EUID)) && ! sudo=$(type -p sudo) &&
		Abort "privileges required but 'sudo' not available"
	$sudo -nv &>/dev/null || echo "$prompt"
	$sudo $@
}

getgo=0 gcfs=1 ver= sudo=
while (($#))
do
	case $1 in
	-g|--get-go) getgo=1 && shift
		[[ ! ${1:0:1} = - ]] && ver=$1 && shift ;;
	-n|--no-gocryptfs) shift && gcfs=0 ;;
	-h|--help) shift && Help ;;
	*) Abort "unrecognized commandline argument: $1"
	esac
done

# Try to install go if not found in PATH
if ((getgo)) || ! go=$(type -p go)
then
	os=${GO_OS:-linux}
	[[ $(uname -m) = armv7l ]] && arch=armv6l || arch=amd64
	: ${arch:=$GO_ARCH}
	: ${ver:=$GO_VERSION}
	[[ -z $ver ]] &&
		url=$(wget -qO- "https://golang.org/dl" |grep -o \
			"https://dl\.google\.com/go/go[^>]*\.$os-$arch\.tar\.gz" |head -1) \
		ver=${url%.$os-$arch.tar.gz} ver=${ver#https://dl.google.com/go/go}
	gover="go$ver.$os-$arch.tar.gz"
	url="https://dl.google.com/go/$gover"
	echo "Installing go $ver on $arch $os"
	tmp=$(mktemp -d --tmpdir=$TMPDIR)
	trap "sudo rm -rf -- '$tmp'" QUIT EXIT
	wget -qO "$tmp/$gover" "$url" ||
		Abort "go not in PATH and could not download it"
	tar xf "$tmp/$gover" -C "$tmp" || Abort "error unpacking $gover to $tmp"
	sudo chown root:root -R -- "$tmp"

	# Move install directory if it exists already
	if [[ -d $goloc/go ]]
	then
		Sudo "to move old go directory" mv -v -- "$goloc/go" \
				"$goloc/$($goloc/go/bin/go version |cut -f3 -d' ')_old$RANDOM" ||
			Abort "could not move $goloc/go out of the way"
	fi
	Sudo "to install go directory" mv -v -- "$tmp/go" "$goloc" ||
		Abort "could not move $tmp/go to $goloc"
	a="p='$goloc/go/bin' && [[ :\$PATH: != *:\$p:* ]] && export PATH=\$p:\$PATH"
	[[ $GOROOT ]] || a+="\nexport GOROOT='$goloc/go'"
	[[ $GOPATH ]] || a+="\nexport GOPATH=\$HOME/go"
	export GOROOT="$goloc/go" GOPATH=~/go
	echo -e "Add to ~/.bashrc:\n\n$a"
	eval "${a//\\n/;}"
	go="$goloc/go/bin/go"
fi

# Install gocryptfs if not blocked
((gcfs)) || exit 0
sudo apt install libssl-dev
repo=$("$go" env GOPATH)/src/$git
"$go" get -d -u $git
"$repo/build.bash"
# "$repo/test.bash"
Sudo "to install gocryptfs" cp -- "$repo/gocryptfs" "$bin" &&
	echo "gocryptfs installed in $bin"

exit 0
