#!/usr/bin/env bash

# localdebs - Create a local repo for deb packages
# Usage:  localdebs
#   Run once, and add URLs to $hookscript as desired.
#   Can be run again when updated
# Required: apt-utils jq sudo

# Overwriting $hookscript $hook $list if they exist
repodir=/var/local/deb
hookscript=/etc/apt/preinvoke
hook=/etc/apt/apt.conf.d/10update_local_packages
list=/etc/apt/sources.list.d/localdebs.list

# Install needed packages
req='apt-utils jq'
sudo apt-get install -y $req

# Create the local repo directory
sudo mkdir -p "$repodir"

# Create the preinvoke script
# =vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv=
echo '#!/usr/bin/env bash

# preinvoke - Run before dpkg/apt

urls=(
	"https://zoom.us/client/latest/zoom_amd64.deb"
	"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
	"https://launcher.mojang.com/download/Minecraft.deb"
	"caddyserver/caddy"
	"rclone/rclone"
	#"schollz/croc"
	"zyedidia/micro"
)

# Local deb packages directory
cd "%%"
echo "Processing localdebs in $PWD..."
for url in "${urls[@]}"
do # Process all URLs
	echo "Check: ${url#https://}"
	case $url in
	caddyserver/caddy)
		latest=$(wget -qO- api.github.com/repos/$url/releases/latest)
		u=$(jq "{assets}" <<<"$latest" |grep browser_download_url |grep -o https.*_linux_amd64.deb |head -1)
		wget -qO caddy-linux-amd64.deb "$u" ;;
	rclone/rclone)
		latest=$(wget -qO- api.github.com/repos/$url/releases/latest)
		u=$(jq "{assets}" <<<"$latest" |grep browser_download_url |grep -o https.*-linux-amd64.deb)
		wget -qO rclone-linux-amd64.deb "$u" ;;
	schollz/croc)
		latest=$(wget -qO- api.github.com/repos/$url/releases/latest)
		u=$(jq "{assets}" <<<"$latest" |grep browser_download_url |grep -o https.*Linux-64bit.deb)
		wget -qO croc_Linux-64bit.deb "$u" ;;
	zyedidia/micro)
		latest=$(wget -qO- api.github.com/repos/$url/releases/latest)
		u=$(jq "{assets}" <<<"$latest" |grep browser_download_url |grep -o https.*amd64.deb)
		wget -qO micro-linux-amd64.deb "$u" ;;
	http*) wget -qN "$url" ;;
	*) echo "ERROR: unhandled URL: $url"
	esac
done

apt-ftparchive packages . >Packages
apt-ftparchive release . >Release
' |sed "s@%%@$repodir@" |sudo tee "$hookscript" >/dev/null
# =^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^=

sudo chmod +x "$hookscript"

# Create the hook
echo "APT::Update::Pre-Invoke {\"$hookscript\";};" |sudo tee "$hook" >/dev/null

# Create the sources.list entry
echo "deb [trusted=yes lang=none] file:$repodir ./" |sudo tee "$list" >/dev/null

