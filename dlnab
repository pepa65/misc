#!/bin/bash

# dlnab - Browse UPnP media servers
# Required: coreutils(cat tr cut) sed/busybox+sed grep awk socat curl/wget/(nc)

Help(){
	cat <<-END
		$Self - Browse UPnP media servers
		USAGE: $Self [<options>] [<pattern>...]
		  options:
		    -L/--list-servers:         List available dlna servers
		    -l/--list-media:           List multimedia resources
		    -s/--server <ip>[:<port>]  Specify media server (-p/--port overrules)
		    -p/--port <port>           Specify media server port (default: 8200)
		    -a/--artist                Match <pattern> in Artist instead of Title
		    -v/--verbose               Verbose mode
		    -h/--help                  Only display this help message
		    -e/--examples              Only display usage examples
	END
}

Examples(){
	cat <<-END
		Usage examples:
		  $Self pattern
		    http://192.168.1.254:8200/MediaItems/22.mp4
		    http://192.168.1.254:8200/MediaItems/23.mp3
		  $Self -s server:3000 -v pattern
		    http://192.168.1.254:8200/MediaItems/22.mp4 - Holding pattern
		    http://192.168.1.254:8200/MediaItems/22.mp3 - Sort patterns
		  $Self -s 192.168.1.254:8200 -v -a foo
		    http://192.168.1.254:8200/MediaItems/24.mp4 - Name by foo
		To search for pattern in all media servers, package 'socat' must be
		installed, or a media server's IP (-s/--server) and port (-p/--port) given
		  $Self -l -v
		    http://192.168.1.111:8200/Desc.xml (Multimedia)
		    File1 - 64\$0
		    File2 - 64\$1
		    Folder/ - 64\$2
		  $Self -l '64\$2'
		    http://192.168.1.111:8200/Desc.xml (Multimedia)
		    File1
		    File2
		    File3
		  $Self -s
		    http://192.168.1.254:8200/rootDesc.xml (MiniDLNA)
		    http://192.168.1.111:8200/Desc.xml (Multimedia)
	END
}

Exit(){
	Help >&2
	[[ $1 ]] && echo "$*" >&2
	exit 1
}

List_servers(){
	type -P socat &>/dev/null || Exit "Need package 'socat'"
	((Verbose)) && local awkfilter='{print}' ||
		local awkfilter='/LOCATION/ {print $2}'

	local query=$(cat <<-'END'
		M-SEARCH * HTTP/1.1\r
		Host: 239.255.255.250:1900\r
		Man: "ssdp:discover"\r
		ST: urn:schemas-upnp-org:device:MediaServer:1\r
		MX: 3.\r
		User-Agent: gupnp-av-cp GSSDP/0.12.1\r\n
	END
	)
	local result results="$(printf "%b" "$query" \
		|socat -T1 STDIO UDP4-DATAGRAM:239.255.255.250:1900 \
		|tr -d '\r' |awk "$awkfilter")"

	for result in $(printf "%s\\n" "$results" |awk '/http/' \
			|$Sed 's,.*http:,http:,')
	do
		local name="$(printf "%s\\n" "$(curl -s  "$result" 2>/dev/null ||
				wget -qO- "$result" 2>/dev/null)" \
			|$Sed 's:</:\n:g' \
			|awk '/<friendlyName/ {gsub(/.*<friendlyName>/,""); print}')"
		results="$(printf "%s\\n" "$results" \
			|$Sed "s,$result,$result ($name),")"
	done

	echo "$results"
}

Init_http_headers(){
	User_agent='User-Agent: gupnp-av-cp GUPnP/0.18.1 DLNADOC/1.50'
	Accept='Accept: '
	Content_type='Content-Type: text/xml; charset="utf-8"'
	Soap_action='SOAPAction: "urn:schemas-upnp-org:service:ContentDirectory:1#Browse"'
	Accept_language_='Accept-Language: en-us;q=1, en;q=0.5'
	Accept_encoding_='Accept-Encoding: gzip'
}

Tree_format_output(){
	$Sed '1i\\' \
		|$Sed -e 's;^;├── ;' -e 's;│   \([^│]\);├── \1;g' -e '1s;.*;┬;'
}

Filter_files(){
	$Sed 's:/dc:\n:g' \
		|awk '/title/ {if ($0 ~ "&lt;$") {if ($0 ~ "container") print $0 "/"; else print}}' \
		|$Sed 's:&lt;::g;s:.*;::;s:"::g' |Tree_format_output
}

Filter_files_with_ids(){
	$Sed 's:id=:\n:g' |$Sed 's:/dc.*::' \
		|awk '/dc:title/ {{if ($0 ~ "childCount") print $0 "/"; else print}}' \
		|awk '{print $0 , "-", $1}' | $Sed 's:&lt;::g;s:.*;::;s:"::g' \
		|Tree_format_output
}

Filter_urls(){
	$Sed 's:id=:\n:g' |awk '/dc:title/' |$Sed 's,.*http://,http://,g;s,&lt.*,,g'
}

Filter_urls_with_title(){
	$Sed 's:id=:\n:g' |awk '/dc:title/' \
		|$Sed 's,.*;dc:title&gt;,,;s:&lt;: :g;s: /res.*::' \
		|$Sed 's:\(^.* /dc\:title\)\(.*\):\2 - \1:' \
		|$Sed 's,.*http://,http://,;s, /dc:title,,'
}

Fetch_data(){
	if type -P curl &>/dev/null
	then
		curl -H "$User_agent" -H "$Accept" -H "$Content_type" \
				-H "$Soap_action" -H "$Accept_language" -H "$Accept_encoding" \
				-X POST -d "$Soap_envelope" -s "$1/ctl/ContentDir"
	elif type -P wget &>/dev/null
	then
		wget --header="$User_agent" --header="$Accept" \
				--header="$Content_type" --header="$Soap_action" \
				--header="$Accept_language" --header="$Accept_encoding" \
				--post-data="$Soap_envelope" -qO- "$1/ctl/ContentDir"
	elif type -P nc &>/dev/null
	then
		local len="$(printf "%s\\n" "$Soap_envelope" |wc -c)"
		local server=${Server#http://}
		local header="POST /ctl/ContentDir HTTP/1.1\r\n"
		header+="$User_agent\r\n"
		header+="$Accept\r\n"
		header+="Host: $s\r\n"
		header+="$Content_type\r\n"
		header+="Content-Length: $len\r\n"
		header+="$Soap_action\r\n"
		header+="$Accept_language\r\n"
		header+="$Accept_encoding\r\n\r\n\r\n"
		header+="$Soap_envelope"
		printf "%b" "$header" |nc "$server" "$Port"
	else
		Exit "Install 'curl', 'wget' or 'netcat' to browse content"
	fi
}

List_media(){
	[[ $Server ]] && local servers="$Server:$Port" ||
		local servers="$(List_servers)"
	[[ $servers ]] || Exit "No servers found"
	Init_http_headers
	Soap_envelope='<?xml version="1.0"?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1"><ObjectID>'"${@:-0}"'</ObjectID><BrowseFlag>BrowseDirectChildren</BrowseFlag><Filter>@childCount</Filter><StartingIndex>0</StartingIndex><RequestedCount>10000</RequestedCount><SortCriteria></SortCriteria></u:Browse></s:Body></s:Envelope>'
	for server in $(printf "%s\\n" "$servers" |awk '{print $1}' |cut -d'/' -f1-3)
	do
		printf "%s\\n" "$servers" |awk "/${server#http://}/"
		((Verbose)) && Fetch_data "$server" |Filter_files_with_ids ||
			Fetch_data "$server" |Filter_files
	done
}

Search_media(){
	[[ $Server ]] && servers="$Server:$Port" ||
		servers="$(List_servers)"
	local criteria='upnp:class derivedfrom "object.item" and '
	((Artist)) && criteria+="upnp:artist contains \"$@\"" ||
		criteria="dc:title contains \"$@\""
	Init_http_headers
	Soap_action='SOAPAction: "urn:schemas-upnp-org:service:ContentDirectory:1#Search"'
	Soap_envelope='<?xml version="1.0" encoding="UTF-8" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><s:Body><u:Search xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1"><ContainerID>0</ContainerID><SearchCriteria>('"$criteria"')</SearchCriteria><Filter>*</Filter><StartingIndex>0</StartingIndex><RequestedCount>100</RequestedCount><SortCriteria>+dc:title</SortCriteria></u:Search></s:Body></s:Envelope>'
	for server in $(printf "%s\\n" "$servers" |awk '{print $1}' |cut -d'/' -f1-3)
	do
		((Verbose)) && Fetch_data "$server" |Filter_urls_with_title ||
			Fetch_data "$server" |Filter_urls
	done
}

Self=${0##*/}

# If stdin from pipe/file, add arguments at the end
[[ -t 0 ]] || set -- "$@" $(cat)
busybox --list |grep -q sed && Sed='busybox sed' || Sed=sed

# Parse commandline
(($#)) || Exit "Showing this help text"
list_servers= list_media= Server= Port= Artist=0 Verbose=0 pattern=()
while (($#))
do
	case $1 in
		-L|--list-servers) list_servers=y ;;
		-l|--list-media) list_media=y ;;
		-s|--server)
			[[ -z $2 || $2 == -* ]] && Exit "Option requires parameter: $1"
			Server=$2
			[[ $Server ]] && Server="http://${Server#http://}"
			shift ;;
		-p|--port)
			[[ -z $2 || $2 == -* ]] && Exit "Option requires parameter: $1"
			Port=$2
			shift ;;
		-a|--artist) Artist=1 ;;
		-v|--verbose) Verbose=1 ;;
		-h|--help) Help; exit 0 ;;
		-e|--examples) Examples; exit 0 ;;
		-*) Exit "Unrecognized option: $1" ;;
		*) pattern+=($1)
	esac
	shift
done

# Validate options
[[ -z $Port && $Server == *:* ]] && Port=${Server##*:}
if [[ $Port ]]
then
	[[ $Port =~ ^[1-9][0-9]*$ ]] && ((Port>0 && Port<65536)) ||
		Exit "Invalid server port: $Port"
else
	Port=8200
fi
Server=${Server%:*}

set -- "${pattern[@]}"
case y in
	$list_servers) List_servers ;;
	$list_media)  List_media "$@" ||
		Exit "No dlna media server found at: $Server:$Port" ;;
	*) Search_media "$@" || Exit "No results found for '$@'"
esac

exit 0
