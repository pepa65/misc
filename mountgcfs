#!/bin/bash
set +vx
## Required: gocryptfs (github) fuse tar grep procps coreutils (and <command>)
## Optional: zenity (otherwise: whiptail)
##
## Set <mount>, <dir> and <name> in this script (and optionally <command>)
## Setup: gocryptfs -init [-plaintextnames] <dir>/<name>
## Usage: mountgcfs

mount=$HOME/Private  ## Must start with slash, has to exist
dir=/data/MyDocuments/SECURE
name=SECRET

## <command> to run after successful mounting
command="/usr/bin/caja $mount/"

Info(){  ## $1: Info message
	((zenity)) &&
		zenity --info --title="$title" --text="<b>$1</b>" 2>/dev/null ||
		whiptail --title="$title" --msgbox "$1" 10 78
}

Unmount(){  ## $1: Mount directory
	fusermount -qu "$mount" && Info "Now unmounted $name from:\n\n$mount" ||
		Info "Unable to unmount $name:\n\n$mount"
	exit 0
}

Abend(){  ## $1: Error message
	Info "ERROR: $1"
	exit 2
}

Password(){  ## $1: boolean-Failed
	(($1)) && failed="Decryption failed, try a different password!\n\n" || failed=
	text="$failed(Run again to manually unmount $name)\n\nMounting $name on $mount\n\nPassword:"
	if ((zenity))
	then
		zenity --entry --hide-text --title="$title" --text="$text" 2>/dev/null ||
			exit 1
#			kill $$ >/dev/null  ## Action to take on Cancel
	else
		whiptail --title "$title" --passwordbox "$text" 16 78 3>&1 1>&2 2>&3 ||
			exit 1
#			kill $$ >/dev/null  ## Action to take on Cancel
	fi
}

type -p zenity >/dev/null && zenity=1 || zenity=0

title="Decrypt $name"
! [[ -s $dir/$name/gocryptfs.conf ]] && Abend "$dir/$name is not a gocryptfs directory"

if grep "$mount" <<<"$(mount)" |grep -q ' fuse\.gocryptfs '
then  ## Directory is FUSE-mounted: unmount, done
	Unmount "$mount"
else  ## Directory not FUSE-mounted
	if mkdir -p "$mount" 2>/dev/null
	then  ## Directory now exists
		chmod 700 "$mount"  ## Force access restriction
	else  ## $mount could not be created: abend
		Abend "Mount point $mount could not be created or \nalready exists and isn't a directory"
	fi
	if [[ $(ls -A "$mount") ]] 2>/dev/null
	then  ## Directory not empty; abend
		Abend "Mount directory $mount not empty, won't use it"
	else  ## Directory is empty and exists and is not mounted; mount
		pass=$(mktemp)
		Password 0 >"$pass"
		while ! gocryptfs -q -passfile "$pass" "$dir/$name" "$mount" 2>/dev/null
		do
			shred -u "$pass"
			Password 1 >"$pass"
		done
		shred -u "$pass"
		sync
		[[ $command ]] && $command &
		## Tar-up the encrypted directory for backup
		tar cfC "$dir/$name.tar" "$dir" "$name"
		sync
	fi
fi

exit 0
