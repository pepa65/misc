#!/usr/bin/env bash
set +xv
# xran - Arrange 2 screens with different pixel densities beside each other
# Required: xrandr

config=$HOME/.xran

Help(){
	cat <<-EOH
		xran - Arrange 2 screens with different pixel densities beside each other
		Usage: xran [-h|-n] [:<lD> [:<rD>]] [<lP> [<rP>]] [+|-<O>] [-s][<S>]
		Starting parameters:  :eDP1 :HDMI1 100 100 +0  (when no default set yet)
		  <lD>, <rD>:  Names of the left and right Displays, preceded by ':'.
		  <lP>, <rP>:  Scaling of left and right display in whole Percentages;
		                if <rP> is zero, the right-hand side display is turned off.
		  +|-<O>:      Vertical alignment Offset of the top edge of the screens,
	                  must start with '+'/'-' (positive: left display is lower).
		  -s [<S>]:    Save as scheme <S>; load <S> when no -s is given. When no
		                <S> is given, the default scheme is used (loaded/saved).
		  -n|--norun:  Don't run the xrandr command (just display the commandline).
		  -h|--help:   Just display this help text.
		The configfile for storing saved schemes is: $config
	EOH
	exit 0
}

	Pr(){ # $1:leftdisplay $2:rightdisplay $3:leftperc $4:rightperc $5:offset
			# $6:leftmode $7:rightmode
		local lpos rpos lp rp sm
		local mlx=${ml%x*} mly=${ml#*x} mrx=${mr%x*} mry=${mr#*x}
		local lx=$((mlx*$3/100)) ly=$((mly*$3/100))
		local rx=$((mrx*$4/100)) ry=$((mry*$4/100))

		(($3<100)) && lp=.$3 || lp=${3:0:1}.${3:1}
		(($4<100)) && rp=.$4 || rp=${4:0:1}.${4:1}
		(($5<0)) &&
			sy=$((-$5+ry>ly ? -$5+ry : ly)) lpos=0x0 rpos=${lx}x${5:1} ||
			sy=$(($5+ly>ry ? $5+ly : ry)) lpos=0x${5:1} rpos=${lx}x0
		sm=$((lx+rx+1))x$((sy+1))
		if (($4))
		then
			echo -n "xrandr --output $1 --auto --scale ${lp}x$lp --mode $ml"
			echo -n " --fb $sm --pos $lpos --primary --output $2 --auto"
			echo " --scale ${rp}x$rp --mode $mr --pos $rpos"
		else # Only one screen
			echo -n "xrandr --output $1 --auto --scale ${lp}x$lp --mode $ml"
			echo " --pos $lpos --primary --output $2 --off"
		fi
	}

Xran(){ # $@: commandline arguments
	local ld= rd= lp= rp= vo= ml= mr= scheme= save= top="at the same height"
	local n=0 run=1 found=0 xrandr=$(xrandr)

	while (($#))
	do
		case $1 in
			-h|--help) Help ;;
			-n) run=0 ;;
			-s) shift
				[[ $save ]] && echo "Too many -s options" && exit 1
				[[ ${1:0:1} != [a-zA-Z] ]] && save=@ && continue
				save=$1 ;;
			[a-zA-Z]*)
				[[ $scheme ]] && echo "Too many schemes: '$1'" && exit 2
				scheme=$1 ;;
			:[a-zA-Z]*)
				if [[ $ld ]]
				then
					[[ $rd ]] && echo "Too many display names: '$1'" && exit 3
					rd=${1:1}
				else ld=${1:1}
				fi ;;
			[1-9]*x[1-9]*)
				if [[ $mml ]]
				then
					[[ $mmr ]] && echo "Too many screen modes given: '$1'" && exit 4
					mmr=$1
				else mml=$1
				fi ;;
			[1-9]*)
				if [[ $lp ]]
				then
					[[ $rp ]] && echo "Too many percentages given: '$1'" && exit 5
					rp=$1
				else lp=$1
				fi ;;
			[+-][0-9]*) [[ $vo ]] && echo "Too many offsets: '$1'" && exit 6
				vo=$1 ;;
			*) echo "Unrecognized argument: '$1'" && exit 7
		esac
		shift
	done

	## Check scheme names
	[[ $save != ${save// } ]] &&
		echo "No whitespace allowed in scheme: '$save'" && exit 8
	[[ $scheme != ${scheme// } ]] &&
		echo "No whitespace allowed in scheme: '$scheme'" && exit 9

	# Load scheme from config
	if [[ -f $config ]]
	then
		[[ $scheme ]] || scheme=@
		while read schemec ldc rdc lpc rpc voc mml mmr
		do # Pick the latest added scheme
			[[ $schemec = $scheme ]] &&
				lds=$ldc rds=$rdc lps=$lpc rps=$rpc vos=$voc mml=$mml mmr=$mmr found=1
		done <"$config"
		((!found)) && [[ $scheme != @ ]] &&
			echo "Scheme '$scheme' not found in $config" && exit 9
	else
		[[ $scheme ]] &&
			echo "Can't load scheme '$scheme' from missing config file: $config" &&
		exit 10
	fi

	# Assign config parameters if not specified on the commandline
	[[ $ld ]] || ld=$lds
	[[ $rd ]] || rd=$rds
	[[ $lp ]] || lp=$lps
	[[ $rp ]] || rp=$rps
	[[ $vo ]] || vo=$vos
	[[ $ml ]] || ml=$ml
	[[ $mr ]] || mr=$mr
	# Assign still unassigned parameters with start values
	[[ $ld ]] || ld=eDP1
	[[ $rd ]] || rd=HDMI1
	[[ $lp ]] || lp=100
	[[ $rp ]] || rp=100
	[[ $vo ]] || vo=+0
	[[ $ml ]] || ml=$(grep $ld -A1 <<<"$xrandr" |tail -1 |grep -o [0-9]*x[0-9]*)
	[[ $mr ]] || mr=$(grep $rd -A1 <<<"$xrandr" |tail -1 |grep -o [0-9]*x[0-9]*)

	# Check parameters
	shopt -s extglob
	[[ $ld != ${ld// } ]] &&
		echo "No whitespace allowed in display name: '$ld'" && exit 11
	[[ $rd != ${rd// } ]] &&
		echo "No whitespace allowed in display name: '$rd'" && exit 12
	[[ ! $lp =~ ^[1-9]*([0-9]) ]] &&
		echo "Percentage for leftscale can only be numeric: '$lp'" && exit 13
	[[ ! $rp =~ ^[1-9]*([0-9]) ]] &&
		echo "Percentage for rightscale can only be numeric: '$rp'" && exit 14
	[[ ! $vo =~ ^[-+][1-9]*([0-9]) ]] &&
		echo "Offset must be a signed integer: '$vo'" && exit 15
	((vo>0)) && top="$vo pixels higher"
	((vo<0)) && top="$vo pixels lower"
	[[ ! $ml =~ ^[1-9]*([0-9])x[1-9]*([0-9]) ]] &&
		echo "Mode of left screen must be <numeric>x<numeric>: '$ml'" && exit 16
	[[ ! $mr =~ ^[1-9]*([0-9])x[1-9]*([0-9]) ]] &&
		echo "Mode of right screen must be <numeric>x<numeric>: '$mr'" && exit 17

	# Save the parameters to the config file
	if [[ $save ]]
	then
		[[ $save = @ ]] && saving="Saving as default: " ||
			saving="Saving as '$save': "
		[[ -f $config ]] ||
			echo "# The last entry of a scheme name gets picked; '@' is default" >"$config"
		echo "$save $ld $rd $lp $rp $vo $ml $mr" >>"$config"
	fi

	# Display the explanation
	((rp)) &&
		echo "$saving\"Display $ld $ml at $lp% on the left and" &&
		echo " $rd $mr at $rp% on right with the top edge $top\"" ||
		echo "$saving\"Single display $ld $ml at $lp%\""

	# Build the xrandr commandline and execute if desired
	((run)) && eval $(Pr $ld $rd $lp $rp $vo $ml $mr) && echo "Done" ||
		Pr $ld $rd $lp $rp $vo $ml $mr
}

Xran "$@"

exit 0
