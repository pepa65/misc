#!/bin/bash

# xran - Arrange 2 screens with different pixel densities beside each other
# Required: xrandr

config=$HOME/.xran
modex=1920 modey=1080

Help(){
	cat <<-EOH
		xran - Arrange 2 screens with different pixel densities beside each other
		       The mode used for both screens is: $mode
		Usage: xran [-h|-n] [:<lD> [:<rD>]] [<lP> [<rP>]] [+|-<O>] [-s][<S>]
		Starting parameters:  :eDP-1 :HDMI-1 100 100 +0  (when no default set yet)
		  <lD>, <rD>:  Names of the left and right Displays, preceded by ':'.
		  <lP>, <rP>:  Scaling of left and right display in whole Percentages;
		                if <rP> is zero, the right-hand side display is turned off.
		  +|-<O>:      Vertical alignment Offset of the top edge of the screens,
	                  must start with '+'/'-' (positive: left display is lower).
		  -s [<S>]:    Save as scheme <S>; load <S> when no -s is given. When no
		                <S> is given, the default scheme is used (loaded/saved).
		  -n|--norun:  Don't run the xrandr command (just display the commandline).
		  -h|--help:   Just display this help text.
		The configfile for storing saved schemes is: $config
	EOH
	exit 0
}

	Pr(){ # $1:leftdisplay $2:rightdisplay $3:leftperc $4:rightperc $5:offset
		local rx=$((modex*$3/100)) lpos rpos lp rp
		(($3<100)) && lp=.$3 || lp=${3:0:1}.${3:1}
		(($4<100)) && rp=.$4 || rp=${4:0:1}.${4:1}
		(($5<0)) &&
			lpos="0x0" rpos="${rx}x${5:1}" ||
			lpos="0x$5" rpos="${rx}x0"
		if (($4))
		then
			echo -n "xrandr --output $1 --auto --scale ${lp}x$lp --mode $mode"
			echo -n " --fb $dmode --pos $lpos --primary --output $2 --auto"
			echo " --scale ${rp}x$rp --mode $mode --pos $rpos"
		else # Only one screen
			echo -n "xrandr --output $1 --auto --scale ${lp}x$lp --mode $mode"
			echo " --pos $lpos --primary --output $2 --off"
		fi
	}

Xran(){ # $@: commandline arguments
	local ld= rd= lp= rp= vo= scheme= save= top="at the same height"
	local n=0 run=1 found=0 mode=${modex}x$modey dmode=$((2*modex))x$((2*modey))

	while (($#))
	do
		case $1 in
			-h|--help) Help ;;
			-n) run=0 ;;
			-s) shift
				[[ $save ]] && echo "Too many -s options" && exit 1
				[[ ${1:0:1} != [a-zA-Z] ]] && save=@ && continue
				save=$1 ;;
			[a-zA-Z]*) [[ $scheme ]] && echo "Too many schemes: '$1'" && exit 2
				scheme=$1 ;;
			:[a-zA-Z]*)
				if [[ $ld ]]
				then
					[[ $rd ]] && echo "Too many display names: '$1'" && exit 3
					rd=${1:1}
				else ld=${1:1}
				fi ;;
			[0-9]*)
				if [[ $lp ]]
				then
					[[ $rp ]] && echo "Too many percentages given: '$1'" && exit 4
					rp=$1
				else lp=$1
				fi ;;
			[+-][0-9]*) [[ $vo ]] && echo "Too many offsets: '$1'" && exit 5
				vo=$1 ;;
			*) echo "Unrecognized argument: '$1'" && exit 6
		esac
		shift
	done

	# Check scheme names
	set -- $save
	(($#>1)) && echo "No whitespace allowed in scheme: '$save'" && exit 7
	set -- $scheme
	(($#>1)) && echo "No whitespace allowed in scheme: '$scheme'" && exit 8

	# Load scheme from config
	if [[ -f $config ]]
	then
		[[ $scheme ]] || scheme=@
		while read
		do # Pick the latest added scheme
			set -- $REPLY
			if [[ $1 = $scheme ]]
			then # Only assign the unassigned parameters
				[[ $ld ]] || ld=$2
				[[ $rd ]] || rd=$3
				[[ $lp ]] || lp=$4
				[[ $rp ]] || rp=$5
				[[ $vo ]] || vo=$6
				found=1
			fi
		done <"$config"
		((!found)) && [[ $scheme != @ ]] &&
			echo "Scheme '$scheme' not found in $config" && exit 9
	else
		[[ $scheme ]] &&
			echo "Can't load scheme '$scheme' from missing config file: $config" &&
		exit 10
	fi


	# Assign unassigned parameters with start values
	[[ $ld ]] || ld=eDP-1
	[[ $rd ]] || rd=HDMI-1
	[[ $lp ]] || lp=100
	[[ $rp ]] || rp=100
	[[ $vo ]] || vo=+0

	# Check parameters
	set -- $ld
	(($#>1)) && echo "No whitespace allowed in display name: '$ld'" && exit 11
	set -- $rd
	(($#>1)) && echo "No whitespace allowed in display name: '$rd'" && exit 12
	[[ ! $lp =~ ^[0-9]*$ ]] &&
		echo "Percentage for leftscale can only be numeric: '$lp'" && exit 13
	[[ ! $rp =~ ^[0-9]*$ ]] &&
		echo "Percentage for rightscale can only be numeric: '$rp'" && exit 14
	[[ ! $vo =~ ^[-+][0-9]*$ ]] &&
		echo "Offset must be a signed integer: '$offset'" && exit 15
	((vo>0)) && top="$vo pixels higher"
	((vo<0)) && top="$vo pixels lower"

	# Save the parameters to the config file
	if [[ $save ]]
	then
		[[ $save = @ ]] && saving="Saving as default: " ||
			saving="Saving as '$save': "
		[[ -f $config ]] ||
			echo "# The last of a scheme name is dominant; '@' is default" >"$config"
		echo "$save $ld $rd $lp $rp $vo" >>"$config"
	fi

	# Display the explanation
	((rp)) &&
		echo "$saving\"Display $ld at $lp% on the left side and" &&
		echo " $rd at $rp% on right side with the top edge $top\"" ||
		echo "$saving\"Single display $ld at $lp%\""

	# Build the xrandr commandline and execute if desired
	((run)) && eval $(Pr $ld $rd $lp $rp $vo) && echo "Done" ||
		Pr $ld $rd $lp $rp $vo
}

Xran "$@"

exit 0
