#!/bin/bash

# xran - Arranging 2 screens with different pixel densities beside each other

Help(){
	cat <<-EOH
		xran - Arranging 2 screens with different pixel densities beside each other
		Usage: xran [-h|-n] [<scale>[<offset>[<left>[<right>[<width>[<height>]]]]]]
		  -h|--help:  Just display this help text
		  -n|-p|--norun|--print:  No execution, just displaying xrandr commands
		  Default parameters: 1 0 HDMI-1 eDP-1 1920 1080
		    <scale> > 1 scales up the left hand screen, < 1 scales it down
		    <offset>: from bottom of the left screen
		    <left>, <right>: names of the displays
		    <width> & <height>: pixel sizes of both displays
	EOH
}

Xran(){ # $1:scale $2:offset from bottom $3:left $4:right $5:width $6:height
	# parameter defaults (no parameters: help)
	local defaults=(1 0 HDMI-1 eDP-1 1920 1080) n=0 p=0 i d l f s
	pl1(){ echo "xrandr --output $left --scale 1x1 --mode ${width}x$height"\
			"--fb $((width*m/f+width))x$height --pos 0x0";}
	prs(){ echo "xrandr --output $right --scale ${s}x$s --mode ${width}x$height"\
			"--pos ${width}x$((height-height*m/f-offset))";}
	pls(){ echo "xrandr --output $left --scale ${s}x$s --mode ${width}x$height"\
			"--fb $((width*m/f+width))x$((height*m/f)) --pos 0x0";}
	pr1(){ echo "xrandr --output $right --scale 1x1 --mode ${width}x$height"\
			"--pos $((width*m/f))x$((height*m/f-height-offset))";}
	if (($#))
	then
		while (($#))
		do
			case $1 in
				-h|--help) Help; return ;;
				-n|-p|--norun|--print) p=1 ;;
				*) [[ ! $1 =~ ^-?[0-9.]*$ ]] &&
						echo "Non-numeric argument: $1" && return ||
						defaults[n++]=$1
					s=${1//[-0-9]} s=${#s}
					((s>1)) && echo "More than one decimal point: $1" && return
					[[ ${1:0:1} = - && ! $n = 2 ]] &&
						echo "Argument cannot be negative: $1" && return
			esac
			shift
		done
		read scale offset left right width height <<<"${defaults[@]}"
		i=${scale%%.*} d=${scale##*.} l=${#d} f=$((10**l))
		if [[ -z $i || $i = 0 ]]
		then # Scale small one down
			s=0.$d m=$d
			((p)) && pl1 || eval $(pl1)
			((p)) && prs || eval $(prs)
		else # Scale big one up
			s=$i.$d m=$i$d
	 		((p)) && pls || eval $(pls)
	 		((p)) && pr1 || eval $(pr1)
		fi
	else Help
	fi
}

Xran "$@"
