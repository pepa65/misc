#!/bin/bash

# xran - Arrange 2 screens with different pixel densities beside each other

Help(){
	cat <<-EOH
		xran - Arrange 2 screens with different pixel densities beside each other
		Usage: xran [-h|-f] [<ldisp> [<rdisp> [<lperc> [<rperc> [<offset>]]]]]
		  -h|--help:   Just display this help text
		  -f|--force:  Execute the xrandr command (otherwise just display it)
		Default parameters:  eDP-1 HDMI-1 100 100 0  (used when '-' is specified)
		  <ldisp>, <rdisp>:  Names of the left and right displays
		  <lperc>, <rperc>:  Scaling of left and right display in percentage
		  <offset>:          Vertical shift (negative: right display is lower)
	EOH
}

Xran(){ # $1:leftdisplay $2:rightdisplay $3:leftperc $4:rightperc $5:offset
	# parameter defaults (no parameters: help)
	local defaults=(eDP-1 HDMI-1 70 80 260) n=0 force=0 ld rd lp rp offset
	Pr(){ # $1:leftdisplay $2:rightdisplay $3:leftperc $4:rightperc $5:offset
		local rx=$((1920*$3/100)) lpos rpos lp rp
		(($3<100)) && lp=.$3 || lp=${3:0:1}.${3:1}
		(($4<100)) && rp=.$4 || rp=${4:0:1}.${4:1}
		(($5<0)) &&
			lpos="0x0" rpos="${rx}x${5:1}" ||
			lpos="0x$5" rpos="${rx}x0"
		echo -n "xrandr --output $1 --auto --scale ${lp}x$lp --mode 1920x1080"
		echo -n " --fb 3840x2160 --pos $lpos --primary --output $2 --auto"
		echo " --scale ${rp}x$rp --mode 1920x1080 --pos $rpos"
	}
	while (($#))
	do
		case $1 in
			-h|--help) Help; return ;;
			-f) force=1 ;;
			*) [[ $1 = - ]] || defaults[n]=$1
		esac
		((++n))
		shift
	done
	read ld rd lp rp offset <<<"${defaults[@]}"
	[[ ! $lp =~ ^[0-9]*$ ]] &&
		echo "Percentage for leftscale must be a positive integer: $lp" &&
		return 1
	[[ ! $rp =~ ^[0-9]*$ ]] &&
		echo "Percentage for rightscale must be a positive integer: $rp" &&
		return 2
	[[ ! $offset =~ ^-?[0-9]*$ ]] &&
		echo "Offset must be an integer: $offset" && return 3
	((offset>0)) && baseline="$offset pixels higher"
	((offset<0)) && baseline="$offset pixels lower"
	((offset==0)) && baseline="at the same height"
	echo "Display $ld at $lp% on the left side and $rd at $rp% on right side with baseline $baseline"
	((force)) &&
		eval $(Pr $ld $rd $lp $rp $offset) && echo "Done" ||
		Pr $ld $rd $lp $rp $offset
}

Xran "$@"
