#!/bin/bash
set +vx
# pdfslice - Make a pdf from a page range in a source document
# Required: poppler-utils(pdfseparate pdfunite pdfinfo) coreutils(mktemp rm ls)

Help(){ # $1:message $2:(optional)code [0:Warning, 1:Fatal]
	if [[ $2 ]]
	then
		(($2)) && echo "FATAL: $1" && exit 2 || echo "WARNING: $1"
	else
		cat <<-EOM
			$Self - Make a pdf from a page range in a source document
			Usage:  $Self [-h|--help ] | <range> <in.pdf> [<out.pdf>]
			  Where <range> is:  [<from>],[<to>] | [<from>][+[<number>]]
			    If <from> or <to> start with a minus sign they count from the back;
			      if omitted they default to first and last page;
			      <number> specifies the number of pages, if omitted defaults to 1.
			  -h/--help:  Just display this help text.
		EOM
		[[ $1 ]] && echo -e "\n$1" && exit 1 || exit 0
	fi
}

Self=${0##*/}
(($#)) || Help "Commandline arguments needed"
[[ $1 = -h || $1 = --help ]] && Help
range=$1 in=$2 out=$3
[[ $range = ?(?(-)[1-9]*([0-9])),?(?(-)[1-9]*([0-9])) ||
		$range = ?(?(-)[1-9]*([0-9]))?(+?([1-9]*([0-9]))) ]] ||
	Help "Invalid format of <range>: '$range'"
[[ -f "$in" ]] || Help "Input document <in.pdf> is not a file: '$in'"
total=$(pdfinfo "$in" 2>/dev/null |grep '^Pages:') total=${total##* }
[[ $total ]] || Help "Could not determine the number of pages in $in"
if [[ $range = *,* ]]
then
	from=${range%,*} to=${range#*,}
	[[ $from ]] || from=1
	((from<0)) && from=$((total+1+from))
	((from<1)) && from=1 &&
		Help "The actual <from> page is lower than 1, using 1" 0
	((from>total)) && from=$total &&
		Help "The actual <from> page is higher than total, using $total" 0
	[[ $to ]] || to=$total
	((to<0)) && to=$((total+1+to))
	((to<1)) && to=1 &&
		Help "The actual <to> page is lower than 1, using 1" 0
	((to>total)) && to=$total &&
		Help "The actual <to> page is higher than total, using $total" 0
	((to<from)) &&
		Help "The actual <to> page is before the actual <from> page: $to<$from"
else  # starting page (+ number)
	[[ $range = *+* ]] && from=${range%+*} number=${range#*+} ||
		from=$range number=1
	[[ $from ]] || from=1
	[[ $number ]] || number=1
	((from<0)) && from=$((total+1+from))
	((from<1)) && from=1 &&
		Help "The actual <from> page is lower than 1, using 1" 0
	((from>total)) && from=$total &&
		Help "The actual first page is higher than total, using $total" 0
	to=$((from+number-1))
	((to>total)) && to=$total &&
		Help "<number> ($number) too high, using $((to-from+1))" 0
fi
[[ $out ]] || out="$(basename "$in" .pdf)_$from-$to.pdf"

tmp=$(mktemp -d)
trap "rm -r -- '$tmp'" QUIT EXIT INT
pdfseparate -f "$from" -l "$to" "$in" "$tmp/p%07d"
[[ -z $(ls -L "$tmp") ]] &&
	Help "Pages $from-$to could not be sliced from $in"
pdfunite "$tmp"/p* "$out"

exit 0
