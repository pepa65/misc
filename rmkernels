#!/bin/bash
set +xv
## rmkernels - uninstall extraneous kernels on Ubuntu based systems
## Usage: bash rmkernels [-h|--help] [-f|--force] [<version>]...
##   -h, --help:    display help text
##   -f, --force:   force removal of newer than currently running kernel
##  anything installed that matches <version> will be proposed for removal
## Requires: grep, sed, find, coreutils(sort, uname, tail), dpkg, apt. sudo

Usage(){
	cat <<-EOS
		 rmkernels - uninstall extraneous kernels on Ubuntu based systems

		 Usage: bash rmkernels [-h|--help] [-f|--force] [<version>]...
		  -h, --help:   display help text
		  -f, --force:  force removal of newer than currently running kernel
		  <version>:    pattern for proposed removal of installed packages
		EOS
}

Main(){
	## Process commandline
	local force=0 pat= pkgsf= pkgpat=
	while [[ $1 ]]
	do
		[[ $1 = -h || $1 = --help ]] && Usage && return 0
		[[ $1 = -f || $1 = --force ]] && force=1 || pat+=" $1"  ## Extra removals
		shift
	done

	## Find superfluous kernels
	all=$(find /boot/vmlinuz-* |  ## Kernel images in /boot
			sed 's@^/boot/vmlinuz-@@' |  ## Truncate to the version
			grep -v '\.efi\.signed' |  ## Exclude additional efi-signed versions
			sort -Vr)  ## Sort by version
	cur=$(uname -r)  ## Currently running kernel version
	non=$(grep -v "$cur" <<<"$all")  ## Non-running kernels in /boot
	echo -e "Found kernel images in /boot:\n$cur (currently running)\n$non"
	## Superfluous versions: latest of same major.minor version all kernels
	sf=$(ao= bo=
		while IFS='.' read a b c
		do
			[[ $a || $b || $c ]] && [[ $ao = $a && $bo = $b ]] && echo "$a.$b.${c%-*}"
			ao=$a bo=$b
		done <<<"$all"
	)
	grep -q "${cur%-*}" <<<"$sf" &&  ## Currently running kernel is superfluous!
		echo -e "\nThe currently running kernel is superfluous itself!" &&
		echo "It can only be removed after a reboot with a newer kernel" &&
		sf=$(grep -v "${cur%-*}" <<<"$sf")
	nall=$(wc -l <<<"$all")
	nsf=$(wc -l <<<"$sf")
	((nall-nsf<2 && nsf>0)) &&  ## Keep at least 1 fallback kernel
		sf=$(tail -n +2 <<<"$sf")  ## Remove most recent from superfluous list
	## Check kernel images and commandline patterns against installed packages
	sedpkg='s@^[^ ]*[ ]*\([^ ]*\).*@\1@'  ## Installed packages sed pattern
	ipkg=$(dpkg -l | tail -n +6 |sed "$sedpkg")  ## Installed packages
	sedsf=$(sed 's@ @ -e @g' <<<' '$sf)  ## Sed pattern for superfluous kernels
	[[ $sf ]] && pkgsf=$(grep $sedsf <<<"$ipkg")  ## Superfluous packages
	if [[ $pkgsf ]]
	then  ## Superflous kernels installed as packages
		echo -e "\nRemoving:\n$sf\n\nFound packages:\n$pkgsf"
	else
		echo "No superfluous packages found based on kernel images in /boot"
	fi

	## Check the commandline patterns
	if [[ $pat ]]
	then
		pkgpat=$(echo "$ipkg" |grep ${pat// / -e })
		pkgpat=$(grep -v "$cur" <<<"$pkgpat")  ## Not current kernel
		if [[ $pkgpat ]]
		then
			echo -e "\nExtra removal patterns from commandline:$pat\nPackages:" $pkgpat
		else
			echo -e "\nNo packages found based on removal patterns on commandline:$pat"
		fi
	fi

	## Removing incompletely uninstalled packages
	rc=$(dpkg -l |grep ^rc |sed "$sedpkg")
	[[ $rc ]] &&
		echo -e "\nUninstalled packages that have not been properly removed:\n" $rc &&
		echo

	## Purge all superfluous and extra versions, and improperly removed packages
	[[ $pkgsf || $pkgpat || $rc ]] && sudo apt purge $pkgsf $pkgpat $rc || echo "Nothing to remove"
}

Main $*
