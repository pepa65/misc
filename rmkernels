#!/usr/bin/env bash
set +xv
# rmkernels - Uninstall extraneous kernels on Ubuntu based systems
# Usage: bash rmkernels [-h|--help] [-f|--force] [<version>]...
#   -h|--help:     Display help text
#   -f|--force:    Force removal of newer than currently running kernel
#   -n|--norun:    Do not actually uninstall packages
#   Anything installed that matches <version> will be proposed for removal
#   If bootctlu is present and active, it will be called to cull the entries
# Required: grep, sed, find, coreutils(sort, uname, tail), dpkg, apt. sudo

keep=${RMKERNELS_KEEP:-2}

Usage(){
	cat <<-EOS
		 rmkernels - Uninstall older kernels on Debian based systems

		 Usage:  rmkernels [-h|--help] [-f|--force] [<version>...]
		  -h, --help:   Display help text
		  -f, --force:  Force removal of newer than currently running kernel
		  <version>:    Pattern for proposed removal of installed packages
		EOS
}

Main(){ # 1:flag I:keep
	# Process commandline
	local force=0 norun=0 pat= pkgremove= pkgpat=
	while (($#))
	do
		[[ $1 = -h || $1 = --help ]] &&
			Usage &&
			return 0
		[[ $1 = -f || $1 = --force ]] &&
			force=1 &&
			shift &&
			continue
		[[ $1 = -n || $1 = --norun ]] &&
			norun=1 &&
			shift &&
			continue
		pat+=" $1"  # Extra removals
		shift
	done

	# Find superfluous kernels
	all=$(find /boot/vmlinuz-* |  # Kernel images in /boot
			sed 's@^/boot/vmlinuz-@@' |  # Truncate to the version
			grep -v '\.efi\.signed' |  # Exclude additional efi-signed versions
			sort -Vr)  # Sort by version, newest first
	cur=$(uname -r)  # Currently running kernel version
	non=$(grep -v "$cur" <<<"$all")  # Non-running kernels in /boot
	echo "Keeping at least $keep kernels installed"
	echo -e "Found kernel images in /boot:\n$cur (currently running)\n$non"
	# Older versions: all except the newest of same major.minor.patch version all kernels
	older=$(
		ao= bo= co=
		while IFS='.' read a b c
		do
			v=${c#*-} c=${c%%-*}
			[[ $a || $b || $c ]] && [[ $ao = $a && $bo = $b && $co=$c ]] && echo "$a.$b.$c-$v"
			ao=$a bo=$b co=$c
		done <<<"$all"
	)
	remove=$older
	grep -q $cur <<<"$older" &&  # Currently running kernel is older
		echo -e "\nThe currently running kernel is older itself" &&
		echo "(It could only be removed after a reboot with a newer kernel)" &&
		remove=$(grep -v $cur <<<"$older")
	n_all=$(wc -l <<<"$all")
	n_remove=$(wc -l <<<"$remove")
	((n_all-n_remove<=keep && n_remove>0)) &&  # Keep at least 1 fallback kernel
		remove=$(tail -n +$keep <<<"$remove")  # Remove most recent from 'remove' list
	# Check kernel images and commandline patterns against installed packages
	sedpkg='s@^[^ ]*[ ]*\([^ ]*\).*@\1@'  # Installed packages sed pattern
	ipkg=$(dpkg -l | tail -n +6 |sed "$sedpkg")  # Installed packages
	sedremove=$(sed 's@^@ -e @g' <<<' '$remove)  # Sed pattern for older kernels
	[[ $remove ]] && pkgremove=$(grep $sedremove <<<"$ipkg")  # To-be-removed packages
	if [[ $pkgremove ]]
	then # Superflous kernels installed as packages
		echo -e "\nRemoving:\n$remove\n\nFound packages:\n$pkgremove"
	else
		echo "No to-be-removed packages found based on kernel images in /boot"
	fi

	# Check the commandline patterns
	if [[ $pat ]]
	then
		pkgpat=$(echo "$ipkg" |grep ${pat// / -e })
		pkgpat=$(grep -v "$cur" <<<"$pkgpat")  # Not current kernel
		if [[ $pkgpat ]]
		then
			echo -e "\nExtra removal patterns from commandline:$pat\nPackages:" $pkgpat
		else
			echo -e "\nNo packages found based on removal patterns on commandline:$pat"
		fi
	fi

	# Removing incompletely uninstalled packages
	rc=$(dpkg -l |grep ^rc |sed "$sedpkg")
	ic=$(dpkg -l |grep ^ic |sed "$sedpkg")
	[[ $rc || $ic ]] &&
		echo -e "\nUninstalled but not properly removed packages:\n" $rc $ic "\n"

	# Purge all superfluous and extra versions, and improperly removed packages
	if [[ $pkgremove || $pkgpat || $rc ]]
	then # Something to remove was found
		((norun)) &&
			echo "### Not actually removing packages" ||
			sudo apt purge $pkgremove $pkgpat $rc
	else echo "Nothing found to be removed"
	fi
	if [[ $ic ]]
	then
		((norun)) &&
			echo "### Not actually purging packages" ||
			sudo dpkg -P $ic
	else echo "Nothing found to be purged"
	fi
}

Main $*
