#!/bin/bash
#set -x

help(){
cat <<-END
	 A utility to backup a list of files and directories (links are followed)
	
	 Usage: $self [<backup-list> [<backup-file> [<backup-log>]]]
	   backup-list: file with list of all files to be backed up, one per line
	     multiple file/dir(s) possible with bash globbing (with * ? and [...])
	   backup-file: output file name (.txz will be appended)
	     backup-file can also be specified in the first line of backup-list, like:
	     @<backup-file>
	   backup-log: log file
	 Lines in backup-list are taken to be filenames, except when the first character is:
	   '@' (at):     line specifying <backup-file> (only in the very first line)
	   ' ' (space):  skipped line
	   '#' (pound):  comment line
	   '$' (dollar): command line

END
}

self=$(readlink -e "$0")
root="$HOME"
list="$root/backup.lst"
txz="$root/backup.txz"
tar="$txz-$RANDOM.tar"
log="$root/backup.log"

[[ $1 ]] && list="$1"
[[ $2 ]] && txz="$2"
[[ $3 ]] && log="$3"

[[ ! -f "$list" ]] && help && echo "ABORT: no backup list file $list present" && exit 1
! >"$txz" && help && echo "ABORT: can't write to backup file $txz" && exit 2
! >"$log" && help && echo "ABORT: can't write to log file $tar" && exit 3

list=$(readlink -e "$list")
readarray -t files <"$list"
! tar cPf "$tar" "$list" && help && echo "ABORT: can't write to temporary file $tar" && exit 4
trap "rm $tar" EXIT

n_files=${#files[@]}
n=0
((n_files)) && line=${files[n++]} && [[ ${line:0:1} = '@' ]] && txz=${line:1}
out=$(echo -e "LIST $list\nBACKUP $txz\nLOG $log\n"
	while ((n<n_files))
	do
		line=${files[$((n++))]}
		! [[ $line ]] && echo && continue  ## empty line
		[[ ${line:0:1} = ' ' ]] && continue  ## start with space
		[[ ${line:0:1} = '#' ]] && echo "    $line" && continue  ## comment
		if [[ ${line:0:1} = '$' ]]
		then  ## command
			eval "${line:1}"
			echo "RUN ${line:1}"
			continue
		fi
		## files/dirs for backup
		shopt -s globstar dotglob nullglob
		none=1
		for file in $line  ## in case of globbing
		do
			none=0
			real=$(readlink -e "$file")
			if [[ $real ]]
			then  ## file/dir exists
				[[ -d "$real" ]] && echo -n ' DIR' || echo -n 'FILE'
				if [[ $file = "$real" ]]
				then  ## no link
					tar rPf "$tar" "$real"
					echo " $real"
				else  # link
					## file not in data: tar file
					if [[ ${real:0:6} = '/data/' ]]
					then
						echo -n '-'
					else
						tar rPf "$tar" "$real"
						echo -n '+'
					fi
					tar rhPf "$tar" "$real"  ## tar link
					echo -e "LINK $file\n  TO $real"
				fi
			else  ## link doesn't exist
				tar rhPf "$tar" "$file"  ## tar dangling link
				echo -e "DANGLING $file"
			fi
		done
		((none)) && echo " NO  $line"  ## No file/dir
	done
)
! less -KPs"Ctrl-C to abort the backup" <<<"$out" && echo "Aborted" && exit 5

xz --stdout -f "$tar" >"$txz"
echo "$out" >"$log"
echo -e "Backup of list $list successful, log at $log, backup file:\n$(ls -AFl $txz)"

exit 0
