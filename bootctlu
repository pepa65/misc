#!/bin/bash

# bootctlu - Installing systemd_boot on Ubuntu with kernels in /boot
#
# Required: util-linux(blkid) grep systemd(bootctl) mount
#           coreutils(readlink sort cut head tail mkdir cat cp)
#           sudo (unless run as root, or only invoked with -n/--nogo)

edition='generic'

Help(){
	cat <<-EOH
		bootctlu - Installing systemd_boot on Ubuntu with kernels in /boot.
		Setup kernel, initrd and entries on ESP, optionally install systemd_boot.
		
		Usage:  bootctlu [-n|--nogo] [-q|--quiet] [-i|--install]
		          -n/--nogo:     No writing to the system at all.
		          -i/--install:  Also do the actual installation with bootctl.
		          -q/--quiet:    Only fatal errors output to the terminal.
	EOH
}

Echo(){ # $1: message, $2: errorcode (exit if present!)
	if [[ $2 ]]
	then
		echo -e "\nABORT: $1"
		exit $2
	fi
	((quiet)) || echo -e "\n$1"
}

go=1 quiet=0 install=0
while (($#))
do
	case $1 in
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-i|--install) install=1 ;;
	-h|--help) Help && exit 0 ;;
	*) Help && Echo "Unrecognized commandline option '$1'" 1
	esac
	shift
done

sudo=
((go && EUID)) && ! sudo=$(type -p sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 2
((go)) || Echo "### Simulation, no actual copying/writing/installing"

[[ -d /sys/firmware/efi/efivars ]] ||
	Echo "Not in UEFI mode, EFI variables not accessible" 3
p=$(blkid |grep 'EFI System') || Echo 'EFI System Partition not mounted' 4

p=${p:0: -1} p=${p##*\"} p=$(readlink -e /dev/disk/by-partuuid/$p)
esp="$(grep "$p" /proc/mounts |cut -d' ' -f2)"
entries="$esp/loader/entries"
id=$(</etc/machine-id)
p=$(mount |grep ' / ') part=${p%% *}

versions=()
for f in $(printf "%s\n" /boot/vmlinuz-* |sort -Vr)
do
	[[ $(dpkg -S "$f") ]] && versions+=("${f#*-}")
done

d=$(grep PRETTY_NAME /etc/os-release) d=${d#*\"}
release=${d:0: -1}
cmdline=$(cut -d' ' -f2- /proc/cmdline)
if ((go))
then
	$sudo mkdir -p "$esp/$id" "$entries" ||
		Echo "Problem making required directories" 5
fi

for version in "${versions[@]}"
do
	path="$esp/$id/$version"
	out="$entries/$id-$version.conf"
	((go)) && ! $sudo mkdir -p "$path" &&
		Echo "Problem making required directory" 6
	Echo "Copying files to $path"
	((go)) && $sudo cp "/boot/vmlinuz-$version" "$path/linux"
	((go)) && $sudo cp "/boot/initrd.img-$version" "$path/initrd"
	Echo "Writing '$out':"
	file=$(cat <<-EOF
		title $release on $part ($version)
		version $version
		machine-id $id
		options $cmdline intel_iommu=on
		linux /$id/$version/linux
		initrd /$id/$version/initrd
	EOF
	)
	((go)) && echo && echo -e "$file" |$sudo tee "$out" || Echo "$file"
done

out="$esp/loader/loader.conf"
file=$(cat <<-EOF
	#auto-entries 0
	#auto-firmware 0
	#console-mode auto
	default $id-*
	timeout 6
	editor yes
EOF
)
if ((go))
then
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] && mv "$out" "$out~" &&
		Echo "WARNING: previous loader.conf renamed to '$out~'"
	Echo "Writing '$out':\n"
	echo -e "$file" |$sudo tee "$out"
else
	Echo "Writing '$out':\n\n$file"
fi

((!go || install)) && Echo "Running 'bootctl install' on $esp"
((go && install)) && $sudo bootctl --path="$esp" install &&
	Echo "Installation successful"
((go && !install)) &&
	Echo "Not actually installing, no -i/--install option given"

((go)) ||
	Echo "### End of simulation, nothing actually copied/written/installed"

exit 0
