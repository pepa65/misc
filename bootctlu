#!/bin/bash

# bootctlu - Setting up and registering systemd_boot on Ubuntu
#
# Required: util-linux(blkid) grep systemd[binaries]
#           coreutils(readlink sort cut mkdir cat cp ls wc rm)
#           sudo (unless run as root, or only invoked with -n/--nogo)
#   For -m/--memtest: wget tar p7zip(7z)
#   For -r/--register: efibootmgr

entryname='Ubuntu menu'
efimnt=/boot/efi

Help(){
	cat <<-EOH
		bootctlu - Setting up and registering systemd_boot on Ubuntu

		Usage:  bootctlu [-n|--nogo] [-q|--quiet] [-v|--verbose]
		                  [-c|--cleanup] [-m|--memtest] [-r|--register]
		          -h/--help:      Display this help text.
		          -n/--nogo:      No writing to the system at all.
		          -q/--quiet:     Only fatal errors output to the terminal.
		          -v/--verbose:   Show more detail of the actions.
		          -e/--efi:       EFI partition mountpoint (default $efimnt)
		          -c/--cleanup:   Remove no longer installed versions.
		          -m/--memtest:   Also download and set up a MemTest86 entry.
		          -r/--register:  Also register the efi-loader with UEFI.
	EOH
}

Echo(){ # $1: message, $2: errorcode (exit if non-zero!)
	# If errorcode is zero, only display the message when verbose is set
	local m=$1
	if [[ $2 ]]
	then
		(($2)) && echo -e "\nABORT: $m" && exit $2
		((verbose)) || m=
	fi
	((quiet)) || echo -ne "$m"
}

off=/dev/null
go=1 quiet=0 rd=$off verbose=0 cleanup=0 register=0 memtest=0 efi=
while (($#))
do
	case $1 in
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-v|--verbose) verbose=1 rd=/dev/stdout ;;
	-e|--efi) efi=$2 && shift || Echo "Invalid mountpoint '$2'" 1 ;;
	-c|--cleanup) cleanup=1 ;;
	-m|--memtest) memtest=1 ;;
	-r|--register) register=1 ;;
	-h|--help) Help && exit 0 ;;
	*) Help && Echo "Unrecognized commandline option '$1'" 2
	esac
	shift
done

sudo=
((EUID)) && ! sudo=$(type -P sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 3

((go)) || Echo "\n### Simulation, no actual copying/writing/registering\n"

[[ -d /sys/firmware/efi/efivars ]] ||
	Echo "Not in UEFI mode, EFI variables not accessible" 4

mapfile <<<"$($sudo blkid |grep 'EFI System')"
[[ ${MAPFILE[0]} ]] || Echo "No EFI System Partitions present" 5

p=${MAPFILE[@]%%: *}
Echo "EFI partitions: $p\n" 0
mp=$(egrep "${p// /|}" /proc/mounts |cut -d' ' -f2)
set $mp
Echo "Mount points of EFI partitions: $*\n" 0

if [[ -z $efi ]]
then # Use default mount point if more than 1 mounted
	(($(wc -w <<<"$@")>1)) && efi=$efimnt || read efi <<<"$@"
fi
[[ " $@ " == *" $efi "* ]] ||
	Echo "Specified EFI mount point '$efi' has no EFI partition mounted" 6
Echo "Working with mount point '$efi'" 0

entries="$efi/loader/entries"
id=$(</etc/machine-id)
vs=$(printf "%s\n" $($sudo ls -1 "$efi/$id" 2>$off) \
	$($sudo ls -1 "$efi/loader/entries/$id-"* 2>$off \
	|sed -e "s@^$efi/loader/entries/$id-@@" -e 's@.conf$@@') |sort -u)
[[ $vs ]] && Echo "\nIn EFI: ${vs//$'\n'/ }\n"

((cleanup)) &&
	for v in $vs
	do [[ ! -f /boot/vmlinuz-$v ]] &&
		Echo "Removed from EFI: $v\n" && ((go)) &&
		$sudo rm -rf -- "$efi/$id/$v" "$efi/loader/entries/$id-$v.conf"
	done

p=$(grep ' / ' /proc/mounts) part=${p%% *}
p=$(grep PRETTY_NAME /etc/os-release) p=${p#*\"}
release=${p:0: -1}
cmdline=$(cut -d' ' -f2- /proc/cmdline)

out="$efi/loader/loader.conf"
file=$(cat <<-EOF
	#auto-entries 0
	#auto-firmware 0
	#console-mode auto
	default $id-*
	timeout 6
	editor yes
EOF
)
if ((go))
then
	$sudo mkdir -p "$efi/$id" "$entries" "$efi/EFI/systemd" "$efi/EFI/Boot" ||
		Echo "Problem making required directories" 5
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] && mv "$out" "$out~" &&
		Echo "\nWARNING: previous loader.conf renamed to '$out~'\n"
	Echo "\nWriting '$out'"
	Echo ":\n" 0
	Echo "\n"
	echo -e "$file" |$sudo tee "$out" >$rd
	efipath='/usr/lib/systemd/boot/efi'
	Echo "\nInstall bootloader binaries\n" 0
	$sudo cp "$efipath/systemd-bootx64.efi" "$efi/EFI/systemd"
	$sudo cp "$efipath/systemd-bootx64.efi" "$efi/EFI/Boot/BOOTX64.EFI"
else
	Echo "\nWriting '$out'"
	Echo ":\n\n$file" 0
	Echo "\n"
fi
Echo "\nCopying efi-loader\n"

versions=
for f in $(printf "%s\n" /boot/vmlinuz-* |sort -Vr)
do
	[[ $(dpkg -S "$f") ]] && versions+="${f#*-} "
done

for version in $versions
do
	path="$efi/$id/$version"
	((go)) && ! $sudo mkdir -p "$path" &&
		Echo "Problem making required directory" 6
	Echo "\nCopying files to $path\n"
	((go)) && $sudo cp "/boot/vmlinuz-$version" "$path/linux"
	((go)) && $sudo cp "/boot/initrd.img-$version" "$path/initrd"
	out="$entries/$id-$version.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title $release on $part ($version)
		version $version
		machine-id $id
		options ${cmdline// intel_iommu=on/} intel_iommu=on
		linux /$id/$version/linux
		initrd /$id/$version/initrd
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
done

if ((memtest))
then
	Echo "\nDownloading and extracting MemTest86...\n"
	tmp=$(mktemp -d)
	cd "$tmp"
	wget -q https://www.memtest86.com/downloads/memtest86-iso.tar.gz ||
		Echo "Can't download MemTest86" 7
	tar xf memtest86-iso.tar.gz
	v=$(echo Memtest86-*.iso) v=${v#*-} v=${v//.iso}
	7z x Memtest86-$v.iso EFI/BOOT >$off
	memtest="$efi/EFI/memtest86"
	((go)) && $sudo rm -rf -- "$memtest"
	((go)) &&
		! $sudo cp --no-preserve=mode,ownership -R EFI/BOOT "$memtest" &&
		Echo "Can't setup the files for MemTest86" 8
	cd -
	rm -r -- "$tmp"
	out="$entries/memtest86.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title MemTest86
		version $v
		efi /EFI/memtest86/BOOTX64.EFI
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
fi

((!go || register)) && Echo "\nRegistering the bootloader with UEFI\n"
if ((go && register))
then
	ebm=$(type -P efibootmgr) ||
		Echo "Can't register with UEFI, efibootmgr not available" 9
	entries=$($sudo $ebm |grep " $entryname$" |grep -o 'Boot....')
	for entry in $entries
	do
		$sudo $ebm -b ${entry:4:4} -B >$off
		Echo "\nUEFI entry '$entry $entryname' removed" 0
	done
	echo
	$sudo $ebm -c -l '\EFI\systemd\systemd-bootx64.efi' -L "$entryname" &&
		Echo "\nSuccessfully registered $entryname\n" 0
fi
((go && !register)) &&
	Echo "\nNot registering with UEFI, no -r/--register option given\n" 0

((go)) ||
	Echo "\n### End of simulation, nothing actually copied/written/registered\n"

exit 0
