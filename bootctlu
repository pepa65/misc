#!/bin/bash
set +vx
# bootctlu - Setting up and registering gummiboot on Ubuntu/Void/Arch
#
# Required: util-linux(lsblk) grep coreutils(sort cut mkdir cat cp s rm cd)
#           sed systemd(file:systemd-bootx64.efi)/wget[if not present]
#           sudo[unless run as root, or only invoked with -n/--nogo]
#   For -m/--memtest: wget tar
#   For -r/--register: efibootmgr

# Used as the UEFI boot entry name
menuname='Main boot menu'

# Timeout for bootmenu (seconds)
timeout=6

# Used when none is specified and there are more than 1 mounted
defesp=/boot/efi

# Boot loader binary location
bootloader='/usr/lib/systemd/boot/efi/systemd-bootx64.efi'

# Downloads
gumurl='4e4.win/gummi' memurl='4e4.win/memtest.tgz' memver='8.1'

Help(){
	cat <<-EOH
		bootctlu - Setting up and registering gummiboot on Ubuntu/Void/Arch

		Usage:  bootctlu [-h|--help] [-n|--nogo] [-q|--quiet] [-v|--verbose]
		                 [-m|--memtest] [-r|--register] [-e|--esp <EFI-mount>]
		        -h/--help:             Only display this help text.
		        -n/--nogo:             No writing to the system at all.
		        -q/--quiet:            Only fatal errors output to the terminal.
		        -v/--verbose:          Show more detail of the actions.
		        -m/--memtest:          Also download and set up a MemTest86 entry.
		        -r/--register:         Also register the efi-loader with UEFI.
		        -e/--esp <EFI-mount>:  EFI System Partition mountpoint, default:
		                               $defesp, can also be set in BOOTCTLU_ESP.
	EOH
}

Echo(){ # $1: message, $2: errorcode (exit if go and non-zero!)
	# If errorcode is zero, only display the message when verbose is set
	local m=$1
	if [[ $2 ]]
	then
		(($2)) && echo -e "\nABORT: $m" && exit $2
		((verbose)) || m=
	fi
	((quiet)) || echo -ne "$m"
}

specesp=$BOOTCTLU_ESP off=/dev/null
go=1 quiet=0 rd=$off verbose=0 register=0 memtest=0 esp=
while (($#))
do
	case $1 in
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-v|--verbose) verbose=1 rd=/dev/stdout ;;
	-e|--esp) [[ ${2%%/*} ]] && Echo "Mountpoint '$2' must start with /" 1
		[[ $specesp ]] && Echo "WARNING: overriding BOOTCTLU_ESP with '$2'"
		specesp=$2
		shift ;;
	-m|--memtest) memtest=1 ;;
	-r|--register) register=1 ;;
	-h|--help) Help && exit 0 ;;
	*) Help && Echo "Unrecognized commandline option '$1'" 2
	esac
	shift
done

sudo=
((EUID)) && ! sudo=$(type -P sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 3
((go)) || Echo "\n### Simulation, no actual copying/writing/registering\n"

# Get EFI System Partitions
mapfile -t <<<"$($sudo lsblk -o KNAME,PARTTYPE |
	grep c12a7328-f81f-11d2-ba4b-00a0c93ec93b)"
[[ ${MAPFILE[0]} ]] || Echo "No EFI System Partitions present" 4
p=(${MAPFILE[@]%% *}) esps=${p[@]/#//dev/}
Echo "EFI System Partitions: $esps\n" 0

# Usable EFI partition must be mounted, collect all mounted
mp=$(egrep "${esps// /|}" /proc/mounts |cut -d' ' -f2)
[[ $mp ]] || Echo "No EFI System Partitions mounted" 5
Echo "Mount points of EFI partitions: $mp\n" 0

# Pick EFI mountpoint
if [[ $specesp ]]
then  # EFI-mount specified (commandline / env.variable): check if mounted
	[[ " $mp " == *" $specesp "* ]] && esp=$specesp ||
		Echo "Specified EFI mountpoint '$specesp' has no EFI partition mounted" 6
else  # No EFI-mount specified
	if [[ " $mp " == *" $defesp "* ]]
	then  # Use default if mounted
		esp=$defesp
	else  # Use the discovered one
		[[ $mp == *$'\n'* ]] &&
			Echo "More than 1 EFI System Partition mounted, must specify one" 7
		esp=$mp
	fi
fi
Echo "Working with EFI mountpoint '$esp'"

# Initialize and prepare loader confguration
[[ -f /etc/machine-id ]] || uuidgen |tr -d '-' >/etc/machine-id
id=$(</etc/machine-id)
entries="$esp/loader/entries" iddir="$esp/$id"
p=$(grep ' / ' /proc/mounts) root=${p%% *}
[[ -f /etc/os-release ]] && p=$(grep PRETTY_NAME /etc/os-release) ||
	p=$(grep DISTRIB_DESCRIPTION /etc/lsb-release)
p=${p#*\"} release=${p:0: -1}
cmdline=$(sed 's@initrd=[^ ]*@@g' /proc/cmdline)
out="$esp/loader/loader.conf"
file=$(cat <<-EOF
	#auto-entries 0
	#auto-firmware 0
	#console-mode auto
	default $id-linux-*
	timeout $timeout
	editor yes
EOF
)

# Install bootloader binary and loader configuration
if ((go))
then
	[[ ! -f $bootloader ]] && bootloader=$PWD/gummi && [[ ! -f gummi ]] &&
		wget -q "$gumurl"
	$sudo mkdir -p "$iddir" "$entries" "$esp/EFI/bootctlu" "$esp/EFI/Boot" ||
		Echo "Problem making required directories" 8
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] &&
		$sudo mv "$out" "$out~" &&
		Echo "\nRenaming previous loader.conf to '$out~'\n" 0
	Echo "\nWriting '$out'"
	Echo ":\n" 0
	Echo "\n"
	echo -e "$file" |$sudo tee "$out" >$rd
	Echo "\nInstalling bootloader binaries\n" 0
	$sudo cp "$bootloader" "$esp/EFI/bootctlu/gummi.efi"
	$sudo cp "$bootloader" "$esp/EFI/Boot/BOOTX64.EFI"
else
	Echo "\nWriting '$out'"
	Echo ":\n\n$file" 0
	Echo "\n"
	Echo "\nInstalling bootloader binaries\n" 0
fi

# Remove all linux entries for the current machine
((go)) && $sudo rm -rf -- "$iddir"/linux-* "$entries/$id-linux-"*.conf

# Making new entries for each kernel binary
for kernel in /boot/vmlinuz-*
do
	version=${kernel#/boot/vmlinuz-}
	shopt -s extglob
	[[ $release = @(void|Artix|Antergos Linux|Arch Linux) ]] &&
		initrd="/boot/initramfs-$version.img" ||
		initrd="/boot/initrd.img-$version"
	entry="$iddir/linux-$version"
	((go)) && ! $sudo mkdir -p "$entry" &&
		Echo "Problem making directory $entry" 9
	Echo "\nCopying files to $entry\n"
	((go)) && $sudo cp "$kernel" "$entry/linux"
	((go)) && $sudo cp "$initrd" "$entry/initrd"
	out="$entries/$id-linux-$version.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title $release on $root (linux-$version)
		version $version
		machine-id $id
		options $cmdline
		linux /$id/linux-$version/linux
		initrd /$id/linux-$version/initrd
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
done

# Downloading and installing memtest86
if ((memtest))
then
	Echo "\nDownloading and extracting MemTest86...\n"
	memdir="$id/memtest86"
	tmp=$(mktemp -d)
	cd "$tmp"
	wget -q "$memurl" || Echo "Can't download MemTest86" 10
	((go)) && $sudo mkdir -p "$esp/$memdir" && $sudo rm -rf -- "$esp/$memdir/*"
	((go)) &&
		! $sudo tar xf memtest.tgz --no-same-owner -C "$esp/$memdir" &&
		Echo "Can't setup the files for MemTest86" 11
	cd -
	rm -r -- "$tmp"
	out="$entries/$id-memtest86.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title MemTest86
		version $memver
		efi $memdir/BOOTX64.efi
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
fi

# Register the bootloader binary with UEFI
if ((register))
then
	[[ ! -d /sys/firmware/efi/efivars ]] &&
		Echo "Not in UEFI mode, no EFI variables, unable to register" 12
	Echo "\nRegistering the bootloader with UEFI\n"
	ebm=$(type -P efibootmgr) ||
		Echo "Can't register with UEFI, efibootmgr not available" 13
	entries=$($sudo $ebm |grep " $menuname$" |grep -o 'Boot....')
	for entry in $entries
	do
		((go)) && $sudo $ebm -b ${entry:4:4} -B >$off
		Echo "\nUEFI entry '$entry $menuname' removed" 0
	done
	echo
	((go)) && $sudo $ebm -c -t $timeout -l '\EFI\bootctlu\gummi.efi' -L "$menuname" &&
		Echo "\nSuccessfully registered $menuname\n" 0
else
	Echo "\nNot registering with UEFI, no -r/--register option given\n" 0
fi

((go)) ||
	Echo "\n### End of simulation, nothing actually copied/written/registered\n"

exit 0
