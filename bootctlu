#!/bin/bash

# bootctlu - Setting up and registering systemd_boot on Ubuntu/Void
#
# Required: util-linux(lsblk) grep
#           coreutils(readlink sort cut mkdir cat cp ls wc rm)
#           systemd(file:systemd-bootx64.efi)/wget[if not present]
#           sudo [unless run as root, or only invoked with -n/--nogo]
#   For -m/--memtest: wget tar p7zip(7z)
#   For -r/--register: efibootmgr

# Used as the UEFI boot entry name
entryname='General boot menu'

# Used when none is specified and there are more than 1 mounted
defefi=/boot/efi

# Memtest location
memver=4.3.7
memurl="https://www.memtest86.com/downloads/memtest86-$memver-iso.tar.gz"

# Boot loader binary location
bootloader='/usr/lib/systemd/boot/efi/systemd-bootx64.efi'

[[ ! -f $bootloader ]] && bootloader=$PWD/gummi && [[ ! -f gummi ]] &&
	wget -q 4e4.win/gummi

Help(){
	cat <<-EOH
		bootctlu - Setting up and registering systemd_boot on Ubuntu/Void

		Usage:  bootctlu [-n|--nogo] [-q|--quiet] [-v|--verbose] [-h|--help]
		                 [-c|--cleanup] [-m|--memtest] [-r|--register]
		                 [-e|--efi <EFI-mount>]
		        -h/--help:             Only display this help text.
		        -n/--nogo:             No writing to the system at all.
		        -q/--quiet:            Only fatal errors output to the terminal.
		        -v/--verbose:          Show more detail of the actions.
		        -c/--cleanup:          Also remove no longer installed versions.
		        -m/--memtest:          Also download and set up a MemTest86 entry.
		        -r/--register:         Also register the efi-loader with UEFI.
		        -e/--efi <EFI-mount>:  EFI System Partition mountpoint, default:
		                               $defefi, can also be set in BOOTCTLU_EFI.
	EOH
}

Echo(){ # $1: message, $2: errorcode (exit if non-zero!)
	# If errorcode is zero, only display the message when verbose is set
	local m=$1
	if [[ $2 ]]
	then
		(($2)) && echo -e "\nABORT: $m" && exit $2
		((verbose)) || m=
	fi
	((quiet)) || echo -ne "$m"
}

specefi=$BOOTCTLU_EFI off=/dev/null
go=1 quiet=0 rd=$off verbose=0 cleanup=0 register=0 memtest=0 efi=
while (($#))
do
	case $1 in
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-v|--verbose) verbose=1 rd=/dev/stdout ;;
	-e|--efi) [[ ${2%%/*} ]] && Echo "Mountpoint '$2' must start with /" 1
		[[ $specefi ]] && Echo "WARNING: overriding BOOTCTLU_EFI with '$2'"
		specefi=$2
		shift ;;
	-c|--cleanup) cleanup=1 ;;
	-m|--memtest) memtest=1 ;;
	-r|--register) register=1 ;;
	-h|--help) Help && exit 0 ;;
	*) Help && Echo "Unrecognized commandline option '$1'" 2
	esac
	shift
done

sudo=
((EUID)) && ! sudo=$(type -P sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 3

((go)) || Echo "\n### Simulation, no actual copying/writing/registering\n"

mapfile -t <<<"$($sudo lsblk -o KNAME,PARTTYPE |
	grep c12a7328-f81f-11d2-ba4b-00a0c93ec93b)"
[[ ${MAPFILE[0]} ]] || Echo "No EFI System Partitions present" 4
p=(${MAPFILE[@]%% *}) efiparts=${p[@]/#//dev/}
Echo "EFI System Partitions: $efiparts\n" 0

# If not specified use the default if it's mounted,
#  otherwise the one that is mounted (unless there are more than 1)

# Usable EFI partition must be mounted, collect all mounted
mp=$(egrep "${efiparts// /|}" /proc/mounts |cut -d' ' -f2)
[[ $mp ]] || Echo "No EFI System Partitions mounted" 5
Echo "Mount points of EFI partitions: $mp\n" 0

if [[ $specefi ]]
then  # If EFI-mount specified (commandline / env.variable): check mount
	[[ " $mp " == *" $specefi "* ]] && efi=$specefi ||
		Echo "Specified EFI mountpoint '$specefi' has no EFI partition mounted" 6
else  # If no EFI-mount specified
	if [[ " $mp " == *" $defefi "* ]]
	then  # Use the default if it's mounted
		efi=$defefi
	else
		[[ $mp == *$'\n'* ]] &&
			Echo "More than 1 EFI System Partition mounted, must specify one" 7
		efi=$1
	fi
fi
Echo "Working with EFI mountpoint '$efi'"

entries="$efi/loader/entries"
[[ -f /etc/machine-id ]] || uuidgen |tr -d '-' >/etc/machine-id
id=$(</etc/machine-id)
vs=$(printf "%s\n" $($sudo ls -1 "$efi/$id" 2>$off) \
	$($sudo ls -1 "$efi/loader/entries/$id-"* 2>$off \
	|sed -e "s@^$efi/loader/entries/$id-@@" -e 's@.conf$@@') |sort -u)
[[ $vs ]] && Echo "\nIn EFI: ${vs//$'\n'/ }\n"

((cleanup)) &&
	for v in $vs
	do [[ ! -f /boot/vmlinuz-$v ]] &&
		Echo "Removed from EFI: $v\n" && ((go)) &&
		$sudo rm -rf -- "$efi/$id/$v" "$efi/loader/entries/$id-$v.conf"
	done

p=$(grep ' / ' /proc/mounts) root=${p%% *}
p=$(grep PRETTY_NAME /etc/os-release) p=${p#*\"} release=${p:0: -1}
cmdline=$(cut -d' ' -f2- /proc/cmdline)

out="$efi/loader/loader.conf"
file=$(cat <<-EOF
	#auto-entries 0
	#auto-firmware 0
	#console-mode auto
	default $id-*
	timeout 6
	editor yes
EOF
)
if ((go))
then
	$sudo mkdir -p "$efi/$id" "$entries" "$efi/EFI/systemd" "$efi/EFI/Boot" ||
		Echo "Problem making required directories" 8
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] &&
		$sudo mv "$out" "$out~" &&
		Echo "\nWARNING: previous loader.conf renamed to '$out~'\n"
	Echo "\nWriting '$out'"
	Echo ":\n" 0
	Echo "\n"
	echo -e "$file" |$sudo tee "$out" >$rd
	efipath='/usr/lib/systemd/boot/efi'
	Echo "\nInstall bootloader binaries\n" 0
	$sudo cp "$bootloader" "$efi/EFI/systemd"
	$sudo cp "$bootloader" "$efi/EFI/Boot/BOOTX64.EFI"
else
	Echo "\nWriting '$out'"
	Echo ":\n\n$file" 0
	Echo "\n"
fi
Echo "\nCopying efi-loader\n"

versions=
for f in $(printf "%s\n" /boot/vmlinuz-* |sort -Vr)
do
	if [[ $release = void ]]
	then
		[[ $(xbps-query -o "$f") ]] && versions+="${f#*-} "
	else
		[[ $(dpkg -S "$f") ]] && versions+="${f#*-} "
	fi
done

for version in $versions
do
	path="$efi/$id/$version"
	[[ $release = void ]] && initrd="/boot/initramfs-$version.img" ||
		initrd="/boot/initrd.img-$version"
	((go)) && ! $sudo mkdir -p "$path" &&
		Echo "Problem making required directory" 9
	Echo "\nCopying files to $path\n"
	((go)) && $sudo cp "/boot/vmlinuz-$version" "$path/linux"
	((go)) && $sudo cp "$initrd" "$path/initrd"
	out="$entries/$id-$version.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title $release on $root ($version)
		version $version
		machine-id $id
		options $cmdline
		linux /$id/$version/linux
		initrd /$id/$version/initrd
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
done

if ((memtest))
then
	Echo "\nDownloading and extracting MemTest86...\n"
	tmp=$(mktemp -d)
	cd "$tmp"
	wget -q "$memurl" || Echo "Can't download MemTest86" 10
	tar xf ${memtesturl##*/}
	v=$(echo Memtest86-$memver.iso) v=${v#*-} v=${v//.iso}
	7z x Memtest86-$memver.iso EFI/BOOT >$off
	memtest="$efi/EFI/memtest86"
	((go)) && $sudo rm -rf -- "$memtest"
	((go)) &&
		! $sudo cp --no-preserve=mode,ownership -R EFI/BOOT "$memtest" &&
		Echo "Can't setup the files for MemTest86" 11
	cd -
	rm -r -- "$tmp"
	out="$entries/memtest86.conf"
	Echo "\nWriting '$out'"
	Echo ":" 0
	Echo "\n"
	file=$(cat <<-EOF
		title MemTest86
		version $memver
		efi /EFI/memtest86/BOOTX64.EFI
	EOF
	)
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
fi

[[ ! -d /sys/firmware/efi/efivars ]] && register=0 &&
	Echo "Not in UEFI mode, EFI variables not accessible, unable to register"
((!go || register)) && Echo "\nRegistering the bootloader with UEFI\n"
if ((go && register))
then
	ebm=$(type -P efibootmgr) ||
		Echo "Can't register with UEFI, efibootmgr not available" 12
	entries=$($sudo $ebm |grep " $entryname$" |grep -o 'Boot....')
	for entry in $entries
	do
		$sudo $ebm -b ${entry:4:4} -B >$off
		Echo "\nUEFI entry '$entry $entryname' removed" 0
	done
	echo
	$sudo $ebm -c -l '\EFI\systemd\systemd-bootx64.efi' -L "$entryname" &&
		Echo "\nSuccessfully registered $entryname\n" 0
fi
((go && !register)) &&
	Echo "\nNot registering with UEFI, no -r/--register option given\n" 0

((go)) ||
	Echo "\n### End of simulation, nothing actually copied/written/registered\n"

exit 0
