#!/bin/bash

# bootctlu - Setting up and registering systemd_boot on Ubuntu
#
# Required: util-linux(blkid) grep efibootmgr systemd[binaries] mount
#           coreutils(readlink sort cut head tail mkdir cat cp)
#           sudo (unless run as root, or only invoked with -n/--nogo)
#   For -m/--memtest: wget tar p7zip(7z)
#   For -r/--register: efibootmgr

edition='generic'
entryname='Ubuntu menu'

Help(){
	cat <<-EOH
		bootctlu - Setting up and registering systemd_boot on Ubuntu

		Usage:  bootctlu [-n|--nogo] [-q|--quiet] [-m|--memtest] [-r|--register]
		          -n/--nogo:      No writing to the system at all.
		          -q/--quiet:     Only fatal errors output to the terminal.
		          -m/--memtest:   Also download and set up a MemTest86 entry.
		          -r/--register:  Also register the efi-loader with UEFI.
	EOH
}

Echo(){ # $1: message, $2: errorcode (exit if present!)
	if [[ $2 ]]
	then
		echo -e "\nABORT: $1"
		exit $2
	fi
	((quiet)) || echo -e "\n$1"
}

go=1 quiet=0 register=0 memtest=0
while (($#))
do
	case $1 in
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-m|--memtest) memtest=1 ;;
	-r|--register) register=1 ;;
	-h|--help) Help && exit 0 ;;
	*) Help && Echo "Unrecognized commandline option '$1'" 1
	esac
	shift
done

sudo=
((go && EUID)) && ! sudo=$(type -p sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 2

((go)) || Echo "### Simulation, no actual copying/writing/registering"

[[ -d /sys/firmware/efi/efivars ]] ||
	Echo "Not in UEFI mode, EFI variables not accessible" 3
p=$($sudo blkid |grep 'EFI System') || Echo 'EFI System Partition not mounted' 4

p=${p:0: -1} p=${p##*\"} p=$(readlink -e /dev/disk/by-partuuid/$p)
esp="$(grep "$p" /proc/mounts |cut -d' ' -f2)"
entries="$esp/loader/entries"
id=$(</etc/machine-id)
p=$(mount |grep ' / ') part=${p%% *}
p=$(grep PRETTY_NAME /etc/os-release) p=${p#*\"}
release=${p:0: -1}
cmdline=$(cut -d' ' -f2- /proc/cmdline)

out="$esp/loader/loader.conf"
file=$(cat <<-EOF
	#auto-entries 0
	#auto-firmware 0
	#console-mode auto
	default $id-*
	timeout 6
	editor yes
EOF
)
if ((go))
then
	$sudo mkdir -p "$esp/$id" "$entries" "$esp/EFI/systemd" "$esp/EFI/Boot" ||
		Echo "Problem making required directories" 5
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] && mv "$out" "$out~" &&
		Echo "WARNING: previous loader.conf renamed to '$out~'"
	Echo "Writing '$out':\n"
	echo -e "$file" |$sudo tee "$out"
	efipath='/usr/lib/systemd/boot/efi'
	cp "$efipath/systemd-bootx64.efi" "$esp/EFI/systemd"
	cp "$efipath/systemd-bootx64.efi" "$esp/EFI/Boot/BOOTX64.EFI"
else
	Echo "Writing '$out':\n\n$file"
fi
Echo "Copying efi-loader"

versions=
for f in $(printf "%s\n" /boot/vmlinuz-* |sort -Vr)
do
	[[ $(dpkg -S "$f") ]] && versions+="${f#*-} "
done

for version in $versions
do
	path="$esp/$id/$version"
	((go)) && ! $sudo mkdir -p "$path" &&
		Echo "Problem making required directory" 6
	Echo "Copying files to $path"
	((go)) && $sudo cp "/boot/vmlinuz-$version" "$path/linux"
	((go)) && $sudo cp "/boot/initrd.img-$version" "$path/initrd"
	out="$entries/$id-$version.conf"
	Echo "Writing '$out':"
	file=$(cat <<-EOF
		title $release on $part ($version)
		version $version
		machine-id $id
		options $cmdline intel_iommu=on
		linux /$id/$version/linux
		initrd /$id/$version/initrd
	EOF
	)
	((go)) && echo && echo -e "$file" |$sudo tee "$out" || Echo "$file"
done

if ((memtest))
then
	Echo "Downloading and extracting MemTest86..."
	tmp=$(mktemp -d)
	cd "$tmp"
	wget -q https://www.memtest86.com/downloads/memtest86-iso.tar.gz ||
		Echo "Can't download MemTest86" 7
	tar xf memtest86-iso.tar.gz
	v=$(echo Memtest86-*.iso) v=${v#*-} v=${v//.iso}
	7z x Memtest86-$v.iso EFI/BOOT >/dev/null
	memtest="$esp/EFI/memtest86"
	$sudo rm -rf -- "$memtest"
	$sudo cp --no-preserve=mode,ownership -R EFI/BOOT "$memtest" ||
		Echo "Can't setup the files for MemTest86" 8
	cd -
	rm -r -- "$tmp"
	out="$entries/memtest86.conf"
	Echo "Writing '$out':"
	file=$(cat <<-EOF
		title MemTest86
		version $v
		efi /EFI/memtest86/BOOTX64.EFI
	EOF
	)
	((go)) && echo && echo -e "$file" |$sudo tee "$out" || Echo "$file"
fi

((!go || register)) && Echo "Registering the systemd loader with UEFI"
if ((go && register))
then
	ebm=$(type -p efibootmgr) ||
		Echo "Can't register with UEFI, efibootmgr not available" 9
	entries=$($ebm |grep " $entryname$" |grep -o 'Boot....')
	for entry in $entries
	do
		$ebm -b ${entry:4:4} -B >/dev/null
		Echo "UEFI entry '$entry $entryname' removed"
	done
	echo
	$ebm -c -l '\EFI\systemd\systemd-bootx64.efi' -L "$entryname" &&
		Echo "Successfully registered $entryname"
fi
((go && !register)) &&
	Echo "Not registering with UEFI, no -r/--register option given"

((go)) ||
	Echo "### End of simulation, nothing actually copied/written/registered"

exit 0
