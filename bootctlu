#!/usr/bin/env bash
set +vx
# bootctlu - Setting up and registering systemd-boot on Ubuntu/Void/Arch
# Required: gdisk(sgdisk) coreutils(tee sort cut mkdir cat cp s rm cd ls diff)
#           grep sed systemd(file:systemd-boot*.efi) uuid-runtime(uuidgen)
#   [non-root or nogo]: sudo
#   [memtest]: wget tar
#   [register]: efibootmgr
#   [install]: diffutils(diff)

Help(){
	cat <<-EOH
		$self - Install & register systemd-boot on Ubuntu/Void/Arch

		Usage:  $self [<option>...]
		  <option>:
		    -h/--help:          Only display this help text.
		    -q/--quiet:         Only fatal errors output to the terminal.
		    -v/--verbose:       Show more detail of the actions.
		    -n/--nogo:          No writing to the system at all.
		    -I/--install:       Only install the script and kernel install hooks
		    -U/--uninstall:     Only uninstall the script and kernel install hooks
		    -i/--imgdir <dir>:  Kernel & initrd images directory, default:
		                        $boot, overrides BOOTCTLU_BOOT.
		    -e/--esp <dir>:     EFI System Partition mountpoint, default:
		                        $defesp, overrides BOOTCTLU_ESP.
		    -m/--memtest:       Also download and set up a MemTest86 entry.
		    -s/--secureboot:    Also install secureboot files.
		    -r/--register:      Also register the efi-loader with UEFI.
		  Extra arguments ignored so this can work as install/remove kernel hook.
	EOH
}

Echo(){ # I:go,verbose,quiet 1:message 2:errorcode(exit if not 0 and go==1)
	# No message if errorcode 0 and verbose 0)
	local msg=$1 err=$2
	if [[ $err ]]
	then
		((err)) && echo -e "\nABORT: $msg" && ((go)) && exit $err
		((!verbose)) && msg=
	fi
	((!quiet)) && echo -ne "$msg"
}

# Default UEFI entry label
label='Main boot manager'

# Default timeout for bootmenu (seconds)
timeout=6

# Default directory for kernel initrd images
boot=/boot

# ESP directory: used when none specified and more than 1 is mounted
defesp=/boot/efi

# Boot manager file
mgr=/usr/lib/systemd/boot/efi/systemd-boot*.efi

# Install location bootctlu
inst=/usr/local/bin

# Install/remove kernel hooks
hook=zz-bootctlu
hookidir=/etc/kernel/postinst.d hooki=$hookidir/$hook
hookrdir=/etc/kernel/postrm.d hookr=$hookrdir/$hook

# Downloads
gumurl='good4.eu/gummi' memurl='good4.eu/memtest.tgz' memver='8.1'

# SecureBoot binaries PreLoader.efi and HashTool.efi urls
preloader='https://apt.blobfolio.com/other/PreLoader/PreLoader.efi'
hashtool='https://apt.blobfolio.com/other/PreLoader/HashTool.efi'

[[ $- = *i* ]] &&
	echo "Don't source, but install or run like: bash $BASH_SOURCE" &&
	return 1

self=${0##*/} imgdir=$boot specesp=$BOOTCTLU_ESP off=/dev/null
go=1 quiet=0 rd=$off verbose=0 register=0 secureboot=0 memtest=0 esp=
while (($#))
do
	case $1 in
	-h|--help) Help && exit 0 ;;
	-I|--install)
		[[ $inst/$self ]] && diff "$0" "$inst/$self" ||
			sudo cp -v "$0" "$inst"
		sudo ln -sfv "$inst/$self" "$hooki"
		sudo ln -sfv "$inst/$self" "$hookr"
		exit 0 ;;
	-U|--uninstall) sudo rm -v "$inst/$self" "$hooki" "$hookr"; exit 0 ;;
	-n|--nogo) go=0 ;;
	-q|--quiet) quiet=1 ;;
	-v|--verbose) verbose=1 rd=/dev/stdout ;;
	-i|--imgdir)
		[[ $BOOTCTLU_BOOT ]] &&
			Echo "WARNING: overriding BOOTCTLU_BOOT with '$2'"
		imgdir=$2
		shift ;;
	-e|--esp)
		[[ ${2%%/*} ]] && Echo "Mountpoint '$2' must start with /" 1
		[[ $specesp ]] && Echo "WARNING: overriding BOOTCTLU_ESP with '$2'"
		specesp=$2
		shift ;;
	-m|--memtest) memtest=1 ;;
	-r|--register) register=1 ;;
	-s|--secureboot) secureboot=1 ;;
	-*) Help && Echo "Unrecognized flag: $1" 2 ;;
	*) Echo "Ignored argument '$1'" 0
	esac
	shift
done

sudo=
((EUID)) && ! sudo=$(type -P sudo) &&
	Echo "Need to escalate privilege, but sudo not present" 3
if ((go))
then
	((register)) && ! ebm=$(type -P efibootmgr) &&
		Echo "Can't register with UEFI, efibootmgr not available" 4
	if [[ ! -f /etc/machine-id ]]
	then
		uuidgen=$(type -P uuidgen) ||
			Echo "Can't generate a machine-id, package uuid-runtime not installed" 5
		$uuidgen |tr -d '-' |$sudo tee /etc/machine-id
	fi
else
	Echo "\n### Simulation, no actual copying/writing/registering\n"
fi

# Get EFI System Partitions
esps=
parts=$(ls -Al /dev/disk/by-partuuid |grep -o '[a-z][a-z0-9]*$')
for part in $parts
do
	num=$(grep -o '[0-9]*$' <<<"$part")
	disk=${part%$num}
	[[ ${disk: -1} = p && ${disk: -2:1} = [0-9] ]] && disk=${disk%p}
	esp=$($sudo sgdisk -i$num /dev/$disk |
			grep C12A7328-F81F-11D2-BA4B-00A0C93EC93B)
	[[ $esp ]] && esps+=" /dev/$part"
done
[[ $esps ]] && esps=${esps:1} || Echo "No EFI System Partitions present" 6
Echo "EFI System Partitions: $esps\n" 0

# Usable EFI partition must be mounted, collect all mounted
mp=$(egrep "${esps// /|}" /proc/mounts |cut -d' ' -f2)
[[ $mp ]] || Echo "No EFI System Partitions mounted" 7
mp=${mp//$'\n'/ }
Echo "Mount points of EFI partitions: $mp\n" 0

# Pick EFI mountpoint
if [[ $specesp ]]
then  # EFI-mount specified (commandline / env.variable): check if mounted
	[[ " $mp " == *" $specesp "* ]] && esp=$specesp ||
		Echo "Specified EFI mountpoint '$specesp' has no EFI partition mounted" 8
else  # No EFI-mount specified
	if [[ " $mp " == *" $defesp "* ]]
	then  # Use default if mounted
		esp=$defesp
	else  # Use the discovered one
		[[ $mp == *$'\n'* ]] &&
			Echo "More than 1 EFI System Partition mounted, must specify one" 9
		esp=$mp
	fi
fi
part=$(grep " $esp " /proc/mounts) part=${part%% *}
partnum=${part##*[^0-9]} disk=${part%$p}
Echo "--- Using mountpoint $esp on $part\n"
Echo "--- Copying images from $imgdir into EFI mountpoint $esp\n"

# Initialize and prepare loader confguration
id=$(</etc/machine-id)
entries="$esp/loader/entries" iddir="$esp/$id"
p=$(grep ' / ' /proc/mounts) root=${p%% *}
[[ -f /etc/os-release ]] && p=$(grep PRETTY_NAME /etc/os-release) ||
	p=$(grep DISTRIB_DESCRIPTION /etc/lsb-release)
p=${p#*\"} release=${p:0: -1}
cmdline=$(sed 's@initrd=[^ ]*@@g' /proc/cmdline)
out="$esp/loader/loader.conf"
file="#auto-entries 0\n#auto-firmware 0\n#console-mode auto\n"
file+="default $id-linux-*\ntimeout $timeout\neditor yes"

# Install boot manager file and loader configuration
if ((go))
then
	[[ ! -f $mgr ]] && mgr=$PWD/gummi && [[ ! -f gummi ]] &&
		wget -q "$gumurl"
	$sudo mkdir -p "$iddir" "$entries" "$esp/EFI/bootctlu" "$esp/EFI/Boot" ||
		Echo "Problem making required directories" 10
	[[ -f "$out" && ! $(echo -e "$file") = $(<"$out") ]] &&
		$sudo mv "$out" "$out~" &&
		Echo "\nRenaming previous loader.conf to '$out~'\n" 0
	Echo "\n--- Writing '$out'"
	Echo ":\n" 0
	echo -e "$file" |$sudo tee "$out" >$rd
	Echo "\nInstalling boot manager file\n" 0
	$sudo cp "$mgr" "$esp/EFI/bootctlu/loader.efi"
	$sudo cp "$mgr" "$esp/EFI/BOOT/BOOTX64.EFI"
	if ((secureboot))
	then
		Echo "\n--- Ensuring the presence of SecureBoot files"
		if [[ ! -f "$esp/EFI/bootctlu/PreLoader.efi" ]]
		then
			Echo "\nDownloading SecureBoot:PreLoader.efi" 0
			wget -qO "$esp/EFI/bootctlu/PreLoader.efi" "$preloader"
		fi
		if [[ ! -f "$esp/EFI/bootctlu/HashTool.efi" ]]
		then
			Echo "\nDownloading SecureBoot:HashTool.efi" 0
			wget -qO "$esp/EFI/bootctlu/HashTool.efi" "$hashtool"
		fi
	fi
else
	Echo "\n--- Writing '$out'"
	Echo ":\n$file" 0
	Echo "\nInstalling boot manager file(s)\n" 0
	((secureboot)) && Echo "\n--- Ensuring the presence of SecureBoot files"
fi

# Remove all linux entries for the current machine
((go)) && $sudo rm -rf -- "$iddir"/linux-* "$entries/$id-linux-"*.conf

# Making new entries for each kernel binary
shopt -s nullglob extglob
for kernel in $imgdir/vmlinuz-*
do
	version=${kernel#$imgdir/vmlinuz-}
	[[ $release = @(void|Artix|Antergos Linux|Arch Linux) ]] &&
		initrd=$imgdir/boot/initramfs-$version.img ||
		initrd=$imgdir/initrd.img-$version
	entry="$iddir/linux-$version"
	((go)) && ! $sudo mkdir -p "$entry" &&
		Echo "Problem making directory $entry" 11
	Echo "\n--- Copying images to $entry"
	((go)) && $sudo cp "$kernel" "$entry/linux"
	((go)) && $sudo cp "$initrd" "$entry/initrd"
	out="$entries/$id-linux-$version.conf"
	Echo "\n--- Writing '$out'"
	Echo ":" 0
	file="title $release on $root (linux-$version)\nversion $version\n"
	file+="machine-id $id\noptions $cmdline\nlinux /$id/linux-$version/linux\n"
	file+="initrd /$id/linux-$version/initrd"
	((go)) && Echo "\n" && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
done

# Downloading and installing memtest86
if ((memtest))
then
	Echo "\nDownloading and extracting MemTest86...\n"
	memdir="$id/memtest86"
	tmp=$(mktemp -d)
	cd "$tmp"
	wget -q "$memurl" || Echo "Can't download MemTest86" 12
	((go)) && $sudo mkdir -p "$esp/$memdir" && $sudo rm -rf -- "$esp/$memdir/*"
	((go)) &&
		! $sudo tar xf memtest.tgz --no-same-owner -C "$esp/$memdir" &&
		Echo "Can't setup the files for MemTest86" 13
	cd - >/dev/null
	rm -r -- "$tmp"
	out="$entries/$id-memtest86.conf"
	Echo "\n--- Writing '$out'"
	Echo ":" 0
	file="title MemTest86\nversion $memver\nefi $memdir/BOOTX64.efi"
	((go)) && Echo "\n" 0 && echo -e "$file" |$sudo tee "$out" >$rd ||
		Echo "\n$file\n" 0
fi

# Register the boot manager with UEFI
if ((register))
then
	[[ ! -d /sys/firmware/efi/efivars ]] &&
		Echo "Not in UEFI mode, no EFI variables, unable to register" 14
	Echo "\nRegistering the boot manager with UEFI\n"
	ebm="$sudo $ebm -d $disk -p $partnum" &&
	entries=$($sudo $ebm |grep " $label$" |grep -o 'Boot....')
	((secureboot)) &&
		entries+=$($sudo $ebm |grep " PreLoader$" |grep -o 'Boot....')
	Echo "\nLooking at entries: "$entries 0
	for entry in $entries
	do
		((go)) && $sudo $ebm -b ${entry:4:4} -B >$off
		Echo "\nUEFI entry '$entry $label' removed" 0
	done
	echo
	((go)) &&
		$sudo $ebm -c -t $timeout -D -l '\EFI\bootctlu\loader.efi' -L "$label" &&
		Echo "\nSuccessfully registered $label\n" 0
	((go && secureboot)) &&
		$sudo $ebm -c -t $timeout -D -l '\EFI\bootctlu\PreLoader.efi' -L "PreLoader" &&
		Echo "\nSuccessfully registered PreLoader\n" 0
else
	Echo "\nNot registering with UEFI, no -r/--register option given\n" 0
fi

((go)) ||
	Echo "\n### End of simulation, nothing actually copied/written/registered\n"

exit 0
