#!/usr/bin/env bash
set +x -e  # Stop on any error
# gomod-update - Update modules in Go projects
# Required: find grep sed go git goreleaser coreutils(cd rm head)
# Usage:  gomod-update [-h|--help] | [-n|--norun] -a|--all | <pkg>...

git=$HOME/git/ readme=README.md mod=go.mod sum=go.sum main=main.go

# Check flags
all=0 help=0 norun=0
[[ $# = 0 || $1 = -h || $1 = --help ]] &&
	help=1

[[ $1 = -a || $1 = --all ]] &&
	all=1 &&
	shift

[[ $1 = -n || $1 = --norun ]] &&
	norun=1 &&
	shift

[[ $1 = -a || $1 = --all ]] &&
	all=1

# Show suitable Go projects
declare -A pkgs
for f in $(find "$git" |grep "/$mod$")
do
	repo=$(cd ${f%$mod}; [[ -d .git ]] &&
			git remote -v |grep '^origin' |grep ' (push)$' |grep 'github\.com.pepa65/' |head -1) &&
		grep -q '^module github.com/pepa65/' "$f" &&
		[[ -f ${f%$mod}$main ]] &&
		v=$(grep 'version [ ]*= "[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*"$' "${f%$mod}$main") &&
		v=${v##* } v=${v//\"} p=${f#$git} p=${p%/$mod} &&
		pkgs[$p]=$v
done
((${#pkgs[@]}==0)) &&
	echo "### No suitable packages found" &&
	exit 1

packages=$(grep -o '[^ ]*' <<<${!pkgs[@]} |sort |tr $'\n' ' ')
packages=${packages%?}
echo -e "--- Suitable packages:\n    $packages"
((help)) &&
	echo "--- Usage:  ${0##*/} [-h|--help] | [-n|--norun] -a|--all | <pkg>..." &&
	exit 0

((all)) &&
	set -- $packages
updates=
declare -A failed
for pkg in $@
do
	[[ ! ,${packages// /,}, = *,$pkg,* ]] &&
		echo -e "### Given package not suitable: $pkg\n" &&
		continue

	# Check update
	cd "$git$pkg"
	rm "$mod"
	update=$(go mod init "github.com/pepa65/$pkg" 2>&1 |head -1)
	go mod tidy
#echo "$update"
	# If go.sum same, checkout go.mod and bail
	[[ -z $(git diff -- $sum) ]] &&
		git checkout $mod 2>/dev/null &&
		echo -e "=== No module updates: $pkg\n" &&
		continue

	updates+="$pkg "
	failed[$pkg]=1
	echo -e "=== Updates found: $pkg\n$(head -1 <<<"$update")"
  ((norun)) &&
    echo &&
    continue

	curr=${pkgs[$pkg]}
	patch=${curr##*.} pp1=$((patch+1)) new=${curr%.*}.$pp1
	echo "--- Patching from $curr to $new"
	! sed -i "s/ \"$curr\"/ \"$new\"/" $main &&
	  echo -e "### Version update in main.go unsuccesful: $pkg\n" &&
	  continue

	! sed -i "s/ \"$curr\"/ \"$new\"/" $readme &&
	  echo -e "--- Version update in $readme unsuccesful: $pkg\n"
		#continue

	go install
	git commit -a -m "Modules update"
	git tag v$new -m $new
	git push origin --all
	goreleaser --clean
	echo "=== Update successful: $pkg"
	unset failed[$pkg]
done

[[ $updates ]] &&
	echo "=== Updates in: $updates" ||
	echo "=== No updates found at all"

[[ $failed ]] &&
	echo "### Failed updates: ${failed[@]}"
