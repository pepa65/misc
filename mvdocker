#!/usr/bin/env bash
set -e  # Stop on any error
# mvdocker - Move docker container including volumes
# Usage:  mvdocker [-i|--install] <container_id> [<container_options>]
# - To start the process, just provide the <container_id>, and a backup
#   will be made of the container, the virtual volume and the run-options.
# - To install the container on the target machine, use the -i/--install
#   option. The <container_options> can be provided, and if they are not, the
#   original options are used for: --volume --publish --expose & --env.
# Output: <container_id>.tar <container_id>-volumes.tgz <container_id>.opts

# Uncomment mgr=podman to use podman instead of docker
mgr=docker
#mgr=podman

base='ubuntu:22.04'

Err(){ # 1:exitcode 2:message
	echo "Usage:  $0 [-i|--install] <container_id> [<container_options>]" >&2
	echo -e "\nAbort: $2" >&2
	exit $1
}

Getopts(){ # I:container IO:options
	[[ $options ]] || options=$(docker inspect -f '--name {{printf "%q" .Name}}{{- with .HostConfig}}{{- range $b := .Binds}} -v {{printf "%q" $b}}{{- end}}{{- with .RestartPolicy}} --restart "{{.Name -}}{{- if eq .Name "on-failure"}}:{{.MaximumRetryCount}}{{- end}}" {{- end}}{{- end}}{{- with .NetworkSettings -}}{{- range $p, $conf := .Ports}}{{- with $conf}} -p " {{- if $h := (index $conf 0).HostIp}}{{$h}}: {{- end}}{{- (index $conf 0).HostPort}}:{{$p}}" {{- end}}{{- end}}{{- end}}{{- with .Config}}{{- range $p, $conf := .ExposedPorts}} --expose {{printf "%q" $p}}{{- end}}{{- range $e := .Env}} -e {{printf "%q" $e}}{{- end}}{{- end}}' $container)
}

Savevols(){ # I:volsfile,mgr,container,cmd,tmpvols O:containervolumes
	[[ -f $volsfile ]] && Err 1 "file $volsfile already exists"
	umask 077
	touch -- $volsfile
	$mgr inspect --type container -f '{{range .Mounts}}{{printf "%v\x00" .Destination}}{{end}}' $container |\
		head -c -1 |sort -uz |$cmd $base tar -c -a -v --null -T- -f $tmpvols
}

Loadvols(){ # 1:container I:volsfile,cmd,base,tmpvols
	local container=$1
	[[ ! -f $volsfile ]] && Err 2 "file $volsfile not found"
	$cmd:ro $base tar -xp -v -S -f $tmpvols -C / --overwrite
}

[[ $1 = '-i' || $1 = '--install' ]] && shift && install=1 || install=0
container=$1
[[ $container ]] || Err 3 "need argument <container_id>"
shift
options=$@
((!install)) && [[ $options ]] &&
	Err 4 "no install, so no <container_options> needed: $options"

imagefile=$container.tar volumesfile=$container-volumes.tgz volsfile=$PWD/$volumesfile
tmpdir=$(mktemp -du) tmpvols=$tmpdir/$volumesfile
image=image-$container opts=$container.opts
cmd="$mgr run --rm -i --volumes-from $container -e LC_ALL=C.UTF-8 -v $volsfile:$tmpvols"
if ((!install))
then # Backup to files, no install
	#docker stop $container
	#docker commit $container $image
	docker commit -p $container $image
	docker save -o $imagefile $image
	Savevols
	echo "Now move '$imagefile', '$volumesfile' & '$opts' to the other server"
	echo "And then do:  $0 --install $container [<container_options>]"
	Getopts
	tr -d '"' <<<"$options" >"$opts"
	echo -e "  If <container_options> are not provided, these are used:\n$options"
else # Install from files
	[[ ! -f $imagefile || ! -f $volumesfile ]] &&
		Err 4 "need files '$imagefile' and '$volumesfile'"
	docker load -i $imagefile
	[[ $options ]] || options=$(<"$opts")
	newcontainer=$(docker create $options $image)
	Loadvols $newcontainer
	docker start $newcontainer
fi
