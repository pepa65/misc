#!/usr/bin/env bash
set -eu
# mkuki - Create EFI Unified Kernel Image
# Required: coreutils(tr mktemp uname cat readlink wc mkdir cp ls head)
#           grep sed  [install]:sudo efibootmgr fdisk mount
# Repp: https://gitlab.com/pepa65/misc
# From: https://github.com/jirutka/efi-mkuki

version=0.1.5

Usage(){ # I:self,efistubdir
	cat<<-EOH
		$self v$version - Create EFI Unified Kernel Image
		  An EFI Unified Kernel Image (UKI) is a single EFI PE executable that can
		  combine an EFI stub loader, a kernel image, an initramfs image, a splash
		  image, the kernel commandline, and CPU microcode images.
		Usage: $self [<option>...]
			<option>:
		  -h|--help                Only display this help text
		  -V|--version             Only display the version
		  -I|--install             Install resulting UKI in '<esp>/EFI/Linux/'
		  -l|--label <txt>         UEFI label in quotes for install (optional)
		  -d|--device <device>     '<esp>' to use for install (optional)
		  -k|--kernel <file>       Linux kernel file (default: '$linux')
		  -i|--initrd <file>       Initramfs file (default: '$init')
		  -m|--microcode <file>    Microcode file (optional, multiple allowed)
		  -c|--cmdline <txt/file>  Kernel cmdline in quotes, or a file containing
                               it, start with / or . (default: '$commandline')
		  -o|--output <file>       Output file (default: '$output')
		  -r|--release <file>      Release file (default: '$osrel')
		  -s|--splash <file>       Splash image: BMP 800x600 24bit (optional)
		  -e|--efistub <file>      EFI stub file (default: 'linux*.efi.stub') in
		                           '$efistubdir', *: x64 | ia32 | aa64 | arm
	EOH
}

Die(){ # 1:msg
	echo "$self abort: $1" >&2
	exit 1
}

self=${0##*/} efistubdir=/usr/lib/systemd/boot/efi
efistub= output= imgs= device= label=
linux=/boot/vmlinuz init=/boot/initrd.img install=0
commandline=/proc/cmdline osrel=/etc/os-release splash=/dev/null

while (($#))
do # Process commandline
	case $1 in
	-h|--help) Usage; exit 0 ;;
	-V|--version) echo "$self $version"; exit 0 ;;
	-I|--install) install=1 ;;
	-l|--label) label=$2; shift ;;
	-d|--device)
		[[ ! -b $2 ]] || Die "No blockdevice found: '$2'"
		device=$2; shift ;;
	-k|--kernel)
		[[ ! -f $2 ]] || Die "kernel file not found: '$2'"
		linux=$2; shift ;;
	-i|--initrd) # An empty initrd could be specified like: --initrd ''
		[[ $2 && ! -f $2 ]] && Die "initramfs file not found: '$2'"
		init=$2; shift ;;
	-m|--microcode)
		[[ -f $2 ]] || Die "microcode file not found: '$2'"
		imgs+="$2 "; shift ;;
	-c|--cmdline) commandline=$2; shift ;;
	-o|--output) output=$2; shift ;;
	-r|--release) osrel=$2; shift ;;
	-s|--splash) splash=$2; shift ;;
	-e|--efistub) efistub=$2; shift ;;
	-*) Die "unknown commandline flag: '$1'" ;;
	*) Die "unknown commandline argument: '$1'"
	esac
	shift
done

[[ $init && ! -f $init ]] && Die "initramfs file not found: '$init'"
[[ -f $linux ]] || Die "kernel file not found: '$linux'"
[[ -f $osrel ]] || Die "OS release file not found: '$osrel'"
[[ -e $splash ]] || Die "splash image not found: '$splash'"
[[ $output ]] || output=${linux##*/}.efi

if [[ -z $efistub ]]
then # Determine architecture for efistub
	arch=$(uname -m)
	case $arch in
	aarch64) march=aa64 ;;
	arm*) march=arm ;;
	x86|i686) march=ia32 ;;
	x86_64) march=x64 ;;
	*) Die "Unsupported machine architecture: '$arch'"
	esac
	efistub="$efistubdir/linux$march.efi.stub"
fi
[[ -f $efistub ]] || Die "no EFI stub file: '$efistub'"

tmpdir=$(mktemp -dt $self.XXXXXX) initrd=$tmpdir/initrd cmdline=$tmpdir/cmdline
trap "rm -rf $tmpdir" EXIT HUP INT TERM
imgs+=$init
[[ $imgs ]] && cat $imgs >"$initrd" || initrd=/dev/null

if [[ ${commandline:0:1} = [/.] ]]
then # File
	[[ -f $commandline ]] || Die "no cmdline-file: '$commandline'"
	cmd=$(grep -v '^ *#' "$commandline" |tr -s '\n' ' ')
else cmd=$commandline
fi
sed -e 's/initrd=[^ ]*//g' -e 's/BOOT_IMAGE=[^ ]*//g' <<<"$cmd" >"$cmdline"

# Might need privileges to get access to some files
sudo objcopy \
	--add-section .osrel="$osrel" --change-section-vma .osrel=0x20000    \
	--add-section .cmdline="$cmdline" --change-section-vma .cmdline=0x30000  \
	--add-section .splash="$splash" --change-section-vma .splash=0x40000   \
	--add-section .linux="$linux" --change-section-vma .linux=0x2000000  \
	--add-section .initrd="$initrd" --change-section-vma .initrd=0x3000000 \
	"$efistub" "$output"

if ((install))
then # Determine <esp>, move the UKI and register
	if [[ $device ]]
	then # EFI System partition specified
		esp=$(readlink "$device")
	else
		esp=$(sudo fdisk -l |grep ^/ |grep 'EFI System$')
		[[ $esp ]] ||
			Die "no proper EFI System partitions found, specify one with -d|--device"
		(($(wc -l <<<"$esp")>1)) &&
			Die "more than 1 EFI System partitions found, specify 1 with -d|--device"
		esp=${esp%% *}
	fi
	_=$(grep -o "^$esp [^ ]*" /proc/mounts |head -1) mount=${_#* }
	if [[ -z $mount ]]
	then # Not mounted
		mount=$tmpdir/mnt
		mkdir "$mount"
		sudo mount "$esp" "$mount"
	fi
	sudo mkdir -p "$mount/EFI/Linux"
	sudo cp -- "$output" "$mount/EFI/Linux"
	mv -- "$output" "$tmpdir/$output"
	[[ $mount = $tmpdir/mnt ]] && sudo umount "$mount"
	partition=$(grep -o '[0-9]*$' <<<"$esp") disk=${esp%$partition}
	[[ ${disk: -1} = p && ${disk: -2:1} = [0-9] ]] && disk=${disk%p}
	if [[ -z $label ]]
	then # Construct label for entry
		_=$(grep PRETTY_NAME "$osrel") _=${_//\"} label=${_#*=}
		if [[ -z $label ]]
		then # No PRETTY_NAME specified
			_=$(grep ^NAME "$osrel") _="${_//\"} label=${_#*=}
			_=$(grep ^VERSION "$osrel") _=${_//\"} label+=" ${_#*=}
		fi
	fi
	sudo efibootmgr -c -d $disk -p $partition -l "/EFI/Linux/$output" -L "$label" |grep "$label"
	output=$tmpdir/$output
fi

# Show the result
for v in osrel cmdline splash linux initrd efistub output
do
	declare -n val=$v
	printf "%-9s" $v
	ls -lH "$val"
done
