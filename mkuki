#!/usr/bin/env bash
set -eu #vx
# mkuki - Create a signed EFI Unified Kernel Image
# Required: coreutils(tr mktemp cat readlink wc mkdir mv head cut) grep sed
#   [install:] sudo efibootmgr fdisk mount ukify sbsigntool(sbsign)
#   systemd-boot-efi(/usr/lib/systemd/boot/efi/*.efi.stub)
# Repo: https://gitlab.com/pepa65/misc
# From: https://github.com/jirutka/efi-mkuki

version=0.3.1

Usage(){ # I:self,linux,init,commandline,defout,osrel
	cat<<-EOH
		$self v$version - Create a signed EFI Unified Kernel Image
		  An EFI Unified Kernel Image (UKI) is a single EFI PE executable that can
		  combine an EFI stub loader, a kernel image, an initramfs image, a splash
		  image, the kernel commandline, and CPU microcode images.
		Usage: $self [<option>...]
			<option>:
		  -h|--help                Only display this help text
		  -V|--version             Only display the version
		  -I|--install             Install resulting UKI in '<esp>/EFI/Linux/'
		  -l|--label <txt>         UEFI label in quotes for install (optional)
		  -d|--device <device>     '<esp>' to use for install (optional)
		  -k|--kernel <file>       Linux kernel file, default: '$linux'
		  -i|--initrd <file>       Initramfs file, default: '$init' ('' for none)
		  -m|--microcode <file>    Microcode file (optional, multiple allowed)
		  -c|--cmdline <txt/file>  Kernel cmdline in quotes or in a file (starting
		                           with '/' or '.'), default: '$commandline'
		  -o|--output <file>       Output file, default: '$defout'
		  -r|--release <file>      Release file, default: '$osrel'
		  -s|--splash <file>       Splash image: BMP 800x600 24bit (optional)
	EOH
}

Die(){ # 1:msg
	echo "$self abort: $1" >&2
	exit 1
}

self=${0##*/}
output= imgs= device= label= install=0
linux=/boot/vmlinuz init=/boot/initrd.img
commandline=/proc/cmdline osrel=/etc/os-release splash=/dev/null
sbkey=/etc/kernel/secure-boot-key.pem
sbcert=/etc/kernel/secure-boot-certificate.pem
defout=ukify.efi ukify_defout=vmlinuz.efi

while (($#))
do # Process commandline
	case $1 in
	-h|--help) Usage; exit 0 ;;
	-V|--version) echo "$self $version"; exit 0 ;;
	-I|--install) install=1 ;;
	-l|--label) label=$2; shift ;;
	-d|--device)
		[[ -b $2 ]] || Die "No blockdevice found: '$2'"
		device=$2; shift ;;
	-k|--kernel)
		[[ -f $2 ]] || Die "kernel file not found: '$2'"
		linux=$2; shift ;;
	-i|--initrd) # An empty initrd could be specified like: --initrd ''
		[[ $2 && ! -f $2 ]] && Die "initramfs file not found: '$2'"
		init=$2; shift ;;
	-m|--microcode)
		[[ -f $2 ]] || Die "microcode file not found: '$2'"
		imgs+="$2 "; shift ;;
	-c|--cmdline) commandline=$2; shift ;;
	-o|--output) output=$2; shift ;;
	-r|--release) osrel=$2; shift ;;
	-s|--splash) splash=$2; shift ;;
	-*) Die "unknown commandline flag: '$1'" ;;
	*) Die "unknown commandline argument: '$1'"
	esac
	shift
done

[[ $init && ! -f $init ]] && Die "initramfs file not found: '$init'"
[[ -f $linux ]] || Die "kernel file not found: '$linux'"
[[ -f $osrel ]] || Die "OS release file not found: '$osrel'"
[[ -e $splash ]] || Die "splash image not found: '$splash'"
[[ $output ]] || output=$defout

tmpdir=$(mktemp -dt $self.XXXXXX) initrd=$tmpdir/initrd cmdline=$tmpdir/cmdline
trap "rm -rf $tmpdir" EXIT HUP INT TERM
imgs+=$init
[[ $imgs ]] && cat $imgs >"$initrd" || initrd=/dev/null

if [[ ${commandline:0:1} = [/.] ]]
then # File
	[[ -f $commandline ]] ||
		Die "no cmdline-file: '$commandline'"
	cmd=$(grep -v '^ *#' "$commandline" |tr -s '\n' ' ')
else cmd=$commandline
fi
sed -e 's/initrd=[^ ]*//g' -e 's/BOOT_IMAGE=[^ ]*//g' <<<"$cmd" >"$cmdline"

# Generate key+cert if nonexistent
[[ ! -f $sbkey || ! -f $sbcert ]] &&
	sudo ukify genkey --secureboot-private-key="$sbkey" --secureboot-certificate="$sbcert"

# Use label for PRETTY_NAME in osrel
sed "s/\(PRETTY_NAME=\"\).*\"/\1$label\"/" "$osrel" >"$tmpdir/os-release"
osrel=$tmpdir/os-release

# efistub is automatically selected based on arch (not selectable)
sudo ukify build --secureboot-private-key="$sbkey" --secureboot-certificate="$sbcert" --os-release=@"$osrel" --cmdline=@"$cmdline" --splash="$splash" --linux="$linux" --initrd="$initrd"
[[ ! $output = $ukify_defout ]] &&
	mv -f "$ukify_defout" "$output"

sudo ukify inspect "$output"

if ((install))
then # Determine <esp>, move the UKI and register
	if [[ $device ]]
	then # EFI System partition specified
		esp=$(readlink -e "$device")
	else
		esp=$(sudo fdisk -l |grep ^/ |grep 'EFI System$')
		[[ $esp ]] ||
			Die "no proper EFI System partitions found, specify one with -d|--device"
		if (($(wc -l <<<"$esp")>1))
		then # More than 1 EFI System partition, use the one mounted on /boot/efi
			for p in $(cut -f1 -d' ' <<<$esp)
			do # Check mount
				grep "$p" /proc/mounts |grep -q ' /boot/efi ' &&
					mountedesp=$p
			done
			[[ -z $mountedesp ]] &&
				Die "multiple EFI System partitions, none on '/boot/efi', specify 1 with -d|--device"
			esp=$mountedesp
		fi
		esp=${esp%% *}
	fi
	_=$(grep -o "^$esp [^ ]*" /proc/mounts |head -1) mount=${_#* }
	if [[ -z $mount ]]
	then # Not mounted
		mount=$tmpdir/mnt
		mkdir "$mount"
		sudo mount "$esp" "$mount"
	fi
	sudo mkdir -p -- "$mount/EFI/Linux"
	sudo mv -- "$output" "$mount/EFI/Linux/"
	[[ $mount = $tmpdir/mnt ]] && sudo umount "$mount"
	partition=$(grep -o '[0-9]*$' <<<"$esp") disk=${esp%$partition}
	[[ ${disk: -1} = p && ${disk: -2:1} = [0-9] ]] && disk=${disk%p}
	if [[ -z $label ]]
	then # Construct label for entry
		_=$(grep PRETTY_NAME "$osrel") _=${_//\"} label=${_#*=}
		if [[ -z $label ]]
		then # No PRETTY_NAME specified
			_=$(grep ^NAME "$osrel") _="${_//\"} label=${_#*=}
			_=$(grep ^VERSION "$osrel") _=${_//\"} label+=" ${_#*=}
		fi
	fi
	sudo efibootmgr -C -d $disk -p $partition -l "/EFI/Linux/$output" -L "$label" |grep "$label"
fi

