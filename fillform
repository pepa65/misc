#!/usr/bin/env bash

# fillform - Auto fill form for multiple cases
# Usage: fillform [-s|--separate] [<dir>]
#   When -s/--separate is given, the separate .pdf files for each form are kept
#   as well as the concatenated file. Directory <dir> has the input files.
# Required: flpsed sed ghostscript(ps2pdf) poppler-utils(pdfunite)
#   coreutils(cd wc rm ls)
#
# In the (current or given) directory there should be 1 file with the .flpsed
# extension that is made with `flpsed FORM.pdf` 'tagging' all the fields with
# Ctrl-E at the desired place on the form and eventually saved as
# 'FORM.flpsed'. The template for filling in the forms can be generated by:
# `flpsed -d FORM.flpsed >TEMPLATE`. For every case the TEMPLATE should be
# copied to CASE.flp (different name CASE for each case!). Each case should be
# filled in with the appropriate values, enclosed in quotes if the value
# contains spaces. The CASE.flp files are filled into the FORM.flp file and a
# CASE.pdf file is generated and eventually merged into one FORM.pdf file.

sep=0 dir=
[[ $1 = -s || $1 = --separate ]] && sep=1 && shift
[[ $1 && ! -d $1 ]] &&
	echo "Argument should be directory: $1" && exit 1
[[ $1 ]] && dir=$1 && shift
[[ $1 = -s || $1 = --separate ]] && sep=1 && shift
[[ $@ ]] && echo "Invalid arguments: $@" && exit 2
[[ $dir ]] && cd "dir"

form=$(echo *.flpsed)
[[ ! -f $form ]] && echo "Need input file $form" && exit 3
lines=$(wc -l <<<$(flpsed -d "$form")) unite=

for name in *.flp
do
	[[ ! $name = ${name// } ]] && echo "'$name' should not have spaces" && exit 4
	[[ ! -f $name ]] && echo "Need input file $name" && exit 5
	l=$(wc -l <"$name")
	((lines!=l)) && echo "Length of $name is $l, not $lines" && exit 6
	fields=$(sed 's@^@ -t @' "$name")
	ps=${name%flp}ps
	cmd="flpsed -b $(echo $fields) \"$form\" \"$ps\""
	#echo "$cmd"
	eval $cmd
	pdf=${name%flp}pdf
	ps2pdf "$ps" "$pdf" && rm -- "$ps"
	unite+="$pdf "
done

! pdfunite $unite ${form%flpsed}pdf &&
	echo "Something went wrong..?" && exit 7
((sep)) || rm -- $unite

ls -AFltr
exit 0
