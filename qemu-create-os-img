#!/bin/bash

sudo bash <<-\EOS

disk_size="4G"
boot_size="300M"
release="Stretch"
debianrepo="http://ftp.pl.debian.org/debian"
ubunturepo="http://archive.ubuntu.com/ubuntu"
include="less,vim,nano,sudo,openssh-server,acpid"
debianrels="stretch,jessie,wheezy,squeeze"
ubunturels="artful,zesty,yakkety,xenial,trusty"

Help(){
	self=${0##*/}
	cat <<-EOF
		$self - Create a fresh Debian/Ubuntu qemu image

		USAGE: $self [-h] [-r <release>] [-h <hostname>] [-i <img_file>]
		                          [-s <disk_size>] [-b <boot_size>] [<debootstrap>]
		    -h:              Just display this help text
		    -r <release>:    A supported Debian ($debianrels) or
		                     Ubuntu ($ubunturels) release
		    -n <hostname>:   Desired hostname
		    -i <img_file>:   Location of the image file (overwritten if existing)
		    -d <disk_size>:  Size of the virtual disk
		    -b <boot_size>:  Size of the boot partition (rest: root partition)
		    <debootstrap>:   Extras arguments for debootstrap
		  Default values when options are not supplied:
		    <release>:       $release
		    <hostname>:      <release>
		    <img_file>:      <hostname>-<os>-<release>.qcow2
		    <disk_size>:     $disk_size
		    <boot_size>:     $boot_size

		Authors: Kamil Trzcinski (http://ayufan.eu)
		         pepa65 <solusos@passchier.net> github.com/pepa65/misc
		License: GPL-3+
	EOF
}

Umount(){
	grep -q "$MNT_DIR$1" /proc/mounts && chroot "$MNT_DIR" umount $1
	sleep 1
}

Clean(){
	if [[ $MNT_DIR ]] && grep -q "$MNT_DIR" /proc/mounts
	then
		Umount /proc
		Umount /sys
		Umount /boot
		Umount /dev
		umount "$MNT_DIR"
		sleep 1
	fi
	[[ $DISK ]] && qemu-nbd -d "$DISK" && sleep 1
	[[ $MNT_DIR ]] && rmdir "$MNT_DIR"
}

Fail(){
	Clean
	echo
	echo "ABORTED: $1"
	exit 2
}

MNT_DIR=$(mktemp -d) DISK=

trap 'Fail "Ctrl-C received"' INT

args=
while (($#))
do
	case $1 in
	-h) Help; exit 0 ;;
	-r) [[ -z $2 ]] && Help && Fail "option $1 needs argument"
		release=$2; shift 2 ;;
	-n) [[ -z $2 ]] && Help && Fail "option $1 needs argument"
		hostname=$2; shift 2 ;;
	-i) [[ -z $2 ]] && Help && Fail "option $1 needs argument"
		img_file=$2; shift 2 ;;
	-d) [[ -z $2 ]] && Help && Fail "option $1 needs argument"
		disk_size=$2; shift 2 ;;
	-b) [[ -z $2 ]] && Help && Fail "option $1 needs argument"
		boot_size=$2; shift 2 ;;
	*) args+="$1 "
		shift ;;
	esac
done

release=${release,,} os=
[[ ,$debianrels, = *,$release,* ]] &&	os=Debian repo=$debianrepo kern=linux-image-amd64
[[ ,$ubunturels, = *,$release,* ]] && os=Ubuntu repo=$ubunturepo kern=linux-image-generic
[[ $os ]] || Fail "release '$release' not supported"

[[ $hostname ]] || hostname=$release
[[ $img_file ]] || img_file=$hostname-$os-$release.qcow2

pw= pwa=1
while [[ ! $pw = $pwa ]]
do
	pw=$(/lib/cryptsetup/askpass "Enter root password for image: ")
	pwa=$(/lib/cryptsetup/askpass "Enter the same password again: ")
done

#((EUID)) && Fail "must have root privileges"

rm -f -- "$img_file" || Fail "insufficient rights to $img_file"
qemu-img create -f qcow2 "$img_file" $disk_size
[[ -f $img_file ]] || Fail "cannot create qemu image $img_file of size $disk_size"

echo "Installing $release into $img_file..."

echo "Looking for nbd device..."

modprobe nbd max_part=16 || Fail "cannot load nbd module into kernel"

for nbd in /dev/nbd*
do
	qemu-nbd -c "$nbd" "$img_file" && DISK=$nbd && break
done
[[ $DISK ]] || Fail "no nbd device available"
echo "Connected $img_file to $DISK"

echo "Partitioning $DISK..."
fdisk_input=$'o\nn\n\n\n\n+'$boot_size$'\nn\n\n\n\n\nw\n'
fdisk -Lnever "$DISK" <<<"$fdisk_input" || Fail "cannot partition $img_file"

echo "Formatting boot partition..."
mkfs.ext4 -q "${DISK}p1" || Fail "cannot create /boot ext4"

echo "Formatting root partition..."
mkfs.ext4 -q "${DISK}p2" || Fail "cannot create / ext4"

echo "Mounting root partition..."
mount "${DISK}p2" "$MNT_DIR" || Fail "cannot mount /"

echo "Installing $os $release..."
debootstrap --include=$include $args "$release" "$MNT_DIR" "$repo" \
		|| Fail "cannot install $os $release onto $DISK"

echo "Configuring system..."

cat <<-EOF >"$MNT_DIR/etc/fstab"
	/dev/sda1 /boot ext4 sync 0 2
	/dev/sda2 / ext4 errors=remount-ro 0 1
EOF

echo "$hostname" >"$MNT_DIR/etc/hostname"

cat <<-EOF >"$MNT_DIR/etc/hosts"
	127.0.0.1 localhost
	127.0.1.1 $hostname

	::1 localhost ip6-localhost ip6-loopback
	ff02::1 ip6-allnodes
	ff02::2 ip6-allrouters
EOF

cat <<-EOF >"$MNT_DIR/etc/network/interfaces"
	auto lo
	iface lo inet loopback

	auto eth0
	iface eth0 inet dhcp
EOF

mount --bind /dev/ "$MNT_DIR/dev" || Fail "cannot bind /dev"
chroot "$MNT_DIR" mount -t ext4 "${DISK}p1" /boot || Fail "cannot mount /boot"
chroot "$MNT_DIR" mount -t proc proc /proc || Fail "cannot mount /proc"
chroot "$MNT_DIR" mount -t sysfs sysfs /sys || Fail "cannot mount /sys"
LANG=C DEBIAN_FRONTEND=noninteractive chroot "$MNT_DIR" apt-get install -y -q $kern grub-pc || Fail "cannot install linux-image and grub packages"
chroot "$MNT_DIR" grub-install "$DISK" || Fail "cannot install grub bootloader"
chroot "$MNT_DIR" update-grub || Fail "cannot update grub"

sed -i "s|${DISK}p1|/dev/sda1|g" "$MNT_DIR/boot/grub/grub.cfg"
sed -i "s|${DISK}p2|/dev/sda2|g" "$MNT_DIR/boot/grub/grub.cfg"

chroot "$MNT_DIR" chpasswd <<<"root:$pw"

echo "Finishing grub installation..."
grub-install "$DISK" --root-directory="$MNT_DIR" --modules="biosdisk part_msdos" || Fail "cannot reinstall grub"

EOS

Clean
echo
echo "Installed $os $release from $repo"
echo " on virtual disk file $img_file with hostname $hostname"
[[ $args ]] && echo " with debootstrap extra arguments $args"
echo " disk size is $disk_size and boot partition size is $boot_size"
echo "SUCCESS!"

exit 0
